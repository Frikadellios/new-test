import { DataDriver, AbstractQuery } from '@directus/data';
import { ParameterizedSqlStatement } from '@directus/data-sql';
import { ReadableStream } from 'node:stream/web';
import pg from 'pg';

/**
 * The driver for PostgreSQL which can be registered by using @directus/data.
 *
 * @packageDocumentation
 */

interface DataDriverPostgresConfig {
    connectionString: string;
}
declare class DataDriverPostgres implements DataDriver {
    #private;
    constructor(config: DataDriverPostgresConfig);
    destroy(): Promise<void>;
    /**
     * Opens a stream for the given SQL statement.
     *
     * @param pool the PostgreSQL client pool
     * @param sql A parameterized SQL statement
     * @returns A readable web stream for the query results
     * @throw An error when the query cannot be performed
     */
    getDataFromSource(pool: pg.Pool, sql: ParameterizedSqlStatement): Promise<ReadableStream<Record<string, unknown>>> | never;
    /**
     * Converts the abstract query into PostgreSQL and executes it.
     *
     * @param abstractSql The abstract query
     * @returns The database results converted to a nested object
     * @throws An error when the conversion or the database request fails
     */
    private queryDatabase;
    query(query: AbstractQuery): Promise<ReadableStream<Record<string, unknown>>>;
}

export { type DataDriverPostgresConfig, DataDriverPostgres as default };
