

class MarginTune {

    /**
     * Default alignment
     *
     * @public
     * @returns {string}
     */
    static get DEFAULT_ALIGNMENT() {
        return {};
    }

    static get isTune() {
        return true;
    }

    getAlignment(){
        if(!!this.settings?.blocks && this.settings.blocks.hasOwnProperty(this.block.name)){
            return this.settings.blocks[this.block.name]
        }
        if(!!this.settings?.default){
            return this.settings.default
        }
        return MarginTune.DEFAULT_ALIGNMENT
    }
    /**
     *
     * @param api
     * @param data 既に設定されているデータ
     * @param settings tuneに設定項目
     * @param block tuneに設定されてるblock
     */
    constructor({ api, data, config, block}) {
        this.api = api;
        this.block = block;
        /**
         config:{
            default: "right",
            blocks: {
              header: 'center',
              list: 'right'
            }
          },
         */
        this.settings = config;
      

        let defaultVal = {  
            margin: '',
            marginY: '',
            marginT: '',
            marginB: '',
            marginX: '',
            marginL: '',
            marginR: '',
            marginClass: '',            
        };

  
        this.data = data || { Margin: defaultVal }
       

    }

    /**
     * block自体をwrapしてくれる
     * constructorで与えられたalignmentを代入しようとすると、holderが確定してなく
     * renderでやろうとすると、tuneを表示時に処理が走る
     * @param blockContent
     */
    wrap(blockContent) {
        this.wrapper = this.make("div");
        // this.wrapper.classList.toggle(`${this.data.Margin}`)
        this.wrapper.append(blockContent)
        return this.wrapper
    }

    /**
     * rendering block tune
     * @returns {*}
     */
    render() {
        const wrapper = this.make("div");

		wrapper.classList.add('cdx-settings-button-header-wrapper');

        var wrap = document.createElement('div');
        wrap.classList.add('MPwrap');
        wrap.classList.add('marginWrapper');
        wrap.innerHTML = '<p>Margin</p>';

        var wrapP = document.createElement('div');
        wrapP.classList.add('MPwrapPTop');

        var wrapPInput = document.createElement('input');
        wrapPInput.classList.add('MPwrapPTopInput');
        wrapPInput.setAttribute('name', 'margin_top');
        wrapPInput.setAttribute('type', 'number');
        // wrapPInput.setAttribute('min', '0');
        wrapPInput.setAttribute('max', '96');
        wrapPInput.setAttribute('step', '0.5');
        wrapPInput.setAttribute('value', this.data.Margin.marginT ? this.data.Margin.marginT : '');

        wrapP.appendChild(wrapPInput);
        wrap.appendChild(wrapP);


        var wrapP2 = document.createElement('div');
        wrapP2.classList.add('MPwrapPSide');

        wrapPInput = document.createElement('input');
        wrapPInput.classList.add('MPwrapPTopInput_LEFT');
        wrapPInput.setAttribute('name', 'margin_left');
        wrapPInput.setAttribute('type', 'number');
        // wrapPInput.setAttribute('min', '0');
        wrapPInput.setAttribute('max', '96');
        wrapPInput.setAttribute('step', '0.5');
        wrapPInput.setAttribute('value', this.data.Margin.marginL ? this.data.Margin.marginL : '');
            
            
       

        wrapP2.appendChild(wrapPInput);

        wrapPInput = document.createElement('input');
        wrapPInput.classList.add('MPwrapPTopInput');
        wrapPInput.setAttribute('name', 'margin');
        wrapPInput.setAttribute('type', 'text');
        // wrapPInput.setAttribute('min', '0');
        wrapPInput.setAttribute('max', '96');
        wrapPInput.setAttribute('step', '0.5');
        wrapPInput.setAttribute('value', this.data.Margin.margin ? this.data.Margin.margin : '');

        wrapP2.appendChild(wrapPInput);

        wrapPInput = document.createElement('input');
        wrapPInput.classList.add('MPwrapPTopInput_RIGHT');
        wrapPInput.setAttribute('name', 'margin_right');
        wrapPInput.setAttribute('type', 'number');
        // wrapPInput.setAttribute('min', '0');
        wrapPInput.setAttribute('max', '96');
        wrapPInput.setAttribute('step', '0.5');
        wrapPInput.setAttribute('value', this.data.Margin.marginR ? this.data.Margin.marginR : '');
        wrapP2.appendChild(wrapPInput);


        var wrapP3 = document.createElement('div');
        wrapP3.classList.add('MPwrapPBottom');
        wrapPInput = document.createElement('input');
        wrapPInput.classList.add('MPwrapPTopInput_bottom');
        wrapPInput.setAttribute('name', 'margin_bottom');
        wrapPInput.setAttribute('type', 'number');
        // wrapPInput.setAttribute('min', '0');
        wrapPInput.setAttribute('max', '96');
        wrapPInput.setAttribute('step', '0.5');
        wrapPInput.setAttribute('value', this.data.Margin.marginB ? this.data.Margin.marginB : '');
        wrapP3.appendChild(wrapPInput);

        wrap.appendChild(wrapP);
        wrap.appendChild(wrapP2);
        wrap.appendChild(wrapP3);
        wrapper.appendChild(wrap);
        let self = this;
        wrapper.querySelector('[name=margin]').addEventListener('input', function(e){
            let v = e.target.value;
            wrapper.querySelector('[name=margin_top]').value = v;
            wrapper.querySelector('[name=margin_bottom]').value = v;
            wrapper.querySelector('[name=margin_left]').value = v;
            wrapper.querySelector('[name=margin_right]').value = v;
            self.save()
        });
        wrapper.querySelector('[name=margin_top]').addEventListener('input', function(e){
            self.save()
        })
        wrapper.querySelector('[name=margin_bottom]').addEventListener('input', function(e){
            self.save()
        })
        wrapper.querySelector('[name=margin_left]').addEventListener('input', function(e){
            self.save()
        }) 
        wrapper.querySelector('[name=margin_right]').addEventListener('input', function(e){
            self.save()
        })
        this.wrapper = wrapper;
        // this.alignmentSettings.map(align => {
        //     const button = document.createElement('button');
        //     button.classList.add(this.api.styles.settingsButton);
        //     // button.classList.add('cdx-settings-button-header');
        //     button.innerHTML = align.icon;
        //     button.type = 'button';
          
        //     button.classList.toggle(this.api.styles.settingsButtonActive, align.prop.className === this.data.Margin);
        //     wrapper.appendChild(button);
        //     return button
        // }).forEach((element, index, elements) => {
           
        //     element.addEventListener('click', () => {
        //         this.data = {
        //             Margin: this.alignmentSettings[index].prop.className
        //         }
        //         elements.forEach((el, i) => {
        //             const {className} = this.alignmentSettings[i].prop;
        //             el.classList.toggle(this.api.styles.settingsButtonActive, className === this.data.Margin);
        //             el.setAttribute('title', this.alignmentSettings[i].title);
        //             //toggle alignment style class for block
        //             if (className.includes(' ')){
        //                 let values = className.split(' ');
        //                 for( var i = 0; i < values.length; i++){
        //                     this.wrapper.classList.toggle(`${values[i]}`, className === this.data.Margin)
        //                 }
        //             }else{

        //                 this.wrapper.classList.toggle(`${className}`, className === this.data.Margin)
        //             }
        //             // this.wrapper.classList.toggle(this._CSS.alignment[name], name === this.data.alignment)
        //         });
        //     });
        // });
        // wrapper.appendChild(wrapperColorsText);
        this.wrp = wrapper;
        return this.wrp;
    }
    /**
     * save
     * @returns {*}
     */
    save() {
        // console.log('margin save');
        if (this.wrp){
            console.log(this.wrp);
            let toolsContent = this.wrp;
            let p = toolsContent.querySelector('[name=margin]').value;
            let pt = toolsContent.querySelector('[name=margin_top]').value;
            let pb = toolsContent.querySelector('[name=margin_bottom]').value;
            let pl = toolsContent.querySelector('[name=margin_left]').value;
            let pr = toolsContent.querySelector('[name=margin_right]').value;
            let pClass = '';
            if (p == ''){
                
                if (pt == pb){     
                    if ((pt !== '') && (pb !== '')){
                        pClass += ` my-${pt}`;
                    }
                     
                }else{
                    if(pt !== ''){
                        pClass += ` mt-${pt}`;
                    }
                    if(pb !== ''){
                        pClass += ` mb-${pb}`;
                    }
                }
    
                if (pl == pr){
                    if ((pl !== '') && (pr !== '')){
                        pClass += ` mx-${pl}`;
                    }
                    
                }else{
                    if(pl !== ''){
                        pClass += ` mt-${pl}`;
                    }
                    if(pr !== ''){
                        pClass += ` mb-${pr}`;
                    }                
                }
                this.data.Margin.margin = '';
            }else{
                this.data.Margin.margin = p;
                pClass = `m-${p}`;
            }
            this.data.Margin.marginY = pt;
            this.data.Margin.marginT = pt;
            this.data.Margin.marginB = pb;
            this.data.Margin.marginX = pl;
            this.data.Margin.marginL = pl;
            this.data.Margin.marginR = pr;
         
            this.data.Margin.marginClass =  pClass;
        }
        return this.data;
    }

    make(tagName, classNames = null, attributes = {}) {
        const el = document.createElement(tagName);
      
        if (Array.isArray(classNames)) {
          el.classList.add(...classNames);
        } else if (classNames) {
          el.classList.add(classNames);
        }
      
        for (const attrName in attributes) {
          el[attrName] = attributes[attrName];
        }
        return el;
    }
}

module.exports = MarginTune;