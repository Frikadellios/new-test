

class containerTypeTune {

    /**
     * Default alignment
     *
     * @public
     * @returns {string}
     */
    static get DEFAULT_ALIGNMENT() {
        return 'container mx-auto';
    }

    static get isTune() {
        return true;
    }

    getAlignment(){
        if(!!this.settings?.blocks && this.settings.blocks.hasOwnProperty(this.block.name)){
            return this.settings.blocks[this.block.name]
        }
        if(!!this.settings?.default){
            return this.settings.default
        }
        return containerTypeTune.DEFAULT_ALIGNMENT
    }
    /**
     *
     * @param api
     * @param data 既に設定されているデータ
     * @param settings tuneに設定項目
     * @param block tuneに設定されてるblock
     */
    constructor({ api, data, config, block}) {
        this.api = api;
        this.block = block;
        /**
         config:{
            default: "right",
            blocks: {
              header: 'center',
              list: 'right'
            }
          },
         */
        this.settings = config;
        this.data = data || { containerType: this.getAlignment() }
        this.alignmentSettings = [
            {
				name: 'Fluid Container',
				title: 'Fullwidth Header',
				type: 'header_container',
				prop: { type: 'full', className:'px-4'},
				icon: `<svg width="52" height="20" viewBox="0 0 52 20" fill="none" xmlns="http://www.w3.org/2000/svg">
				<rect width="52" height="20" rx="5" fill="#A8BBFF"/>
				<rect x="2" y="7" width="47" height="6" rx="1" fill="#33375D"/>
				<path d="M15.9115 9.76H16.5375V9.6H15.9115V9.76ZM15.9115 10.32H16.5175V10.16H15.9115V10.32ZM15.8175 9.6V11H15.9875V9.6H15.8175ZM18.1484 10.64V10.08H17.9884V10.66C17.9884 10.7693 18.0171 10.8567 18.0744 10.922C18.1317 10.9873 18.2084 11.02 18.3044 11.02C18.3657 11.02 18.4191 11.0067 18.4644 10.98C18.5097 10.952 18.5477 10.9107 18.5784 10.856V11H18.7384V10.08H18.5784V10.64C18.5784 10.6853 18.5684 10.7253 18.5484 10.76C18.5297 10.7947 18.5024 10.822 18.4664 10.842C18.4317 10.8607 18.3911 10.87 18.3444 10.87C18.2804 10.87 18.2317 10.85 18.1984 10.81C18.1651 10.77 18.1484 10.7133 18.1484 10.64ZM20.2592 9.44V11H20.4192V9.44H20.2592ZM21.9401 9.44V11H22.1001V9.44H21.9401ZM26.6967 10.63L26.2807 9.53L25.8727 10.63L25.5007 9.6H25.3107L25.8607 11.07L26.2807 9.982L26.7007 11.07L27.2507 9.6H27.0607L26.6967 10.63ZM28.6411 9.7C28.6411 9.72933 28.6518 9.75533 28.6731 9.778C28.6958 9.79933 28.7218 9.81 28.7511 9.81C28.7818 9.81 28.8078 9.79933 28.8291 9.778C28.8505 9.75533 28.8611 9.72933 28.8611 9.7C28.8611 9.66933 28.8505 9.64333 28.8291 9.622C28.8078 9.60067 28.7818 9.59 28.7511 9.59C28.7218 9.59 28.6958 9.60067 28.6731 9.622C28.6518 9.64333 28.6411 9.66933 28.6411 9.7ZM28.6711 10.08V11H28.8311V10.08H28.6711ZM31.0707 9.44V11H31.2307V9.44H31.0707ZM30.3007 10.54C30.3007 10.6387 30.3213 10.724 30.3627 10.796C30.404 10.868 30.4593 10.9233 30.5287 10.962C30.598 11.0007 30.674 11.02 30.7567 11.02C30.834 11.02 30.9013 11.0007 30.9587 10.962C31.016 10.9233 31.0607 10.868 31.0927 10.796C31.126 10.724 31.1427 10.6387 31.1427 10.54C31.1427 10.44 31.126 10.3547 31.0927 10.284C31.0607 10.212 31.016 10.1567 30.9587 10.118C30.9013 10.0793 30.834 10.06 30.7567 10.06C30.674 10.06 30.598 10.0793 30.5287 10.118C30.4593 10.1567 30.404 10.212 30.3627 10.284C30.3213 10.3547 30.3007 10.44 30.3007 10.54ZM30.4627 10.54C30.4627 10.4693 30.4767 10.4093 30.5047 10.36C30.534 10.3107 30.5727 10.2733 30.6207 10.248C30.6687 10.2227 30.7207 10.21 30.7767 10.21C30.8233 10.21 30.8693 10.2227 30.9147 10.248C30.96 10.2733 30.9973 10.3107 31.0267 10.36C31.056 10.4093 31.0707 10.4693 31.0707 10.54C31.0707 10.6107 31.056 10.6707 31.0267 10.72C30.9973 10.7693 30.96 10.8067 30.9147 10.832C30.8693 10.8573 30.8233 10.87 30.7767 10.87C30.7207 10.87 30.6687 10.8573 30.6207 10.832C30.5727 10.8067 30.534 10.7693 30.5047 10.72C30.4767 10.6707 30.4627 10.6107 30.4627 10.54ZM32.6013 10.08V10.23H33.0613V10.08H32.6013ZM32.7513 9.76V11H32.9113V9.76H32.7513ZM34.6018 9.44H34.4418V11H34.6018V9.44ZM35.0318 10.44V11H35.1918V10.42C35.1918 10.34 35.1784 10.2733 35.1518 10.22C35.1264 10.1667 35.0898 10.1267 35.0418 10.1C34.9951 10.0733 34.9398 10.06 34.8758 10.06C34.8118 10.06 34.7551 10.0767 34.7058 10.11C34.6578 10.1433 34.6198 10.1887 34.5918 10.246C34.5638 10.302 34.5498 10.3667 34.5498 10.44H34.6018C34.6018 10.396 34.6111 10.3567 34.6298 10.322C34.6498 10.2873 34.6771 10.26 34.7118 10.24C34.7478 10.22 34.7891 10.21 34.8358 10.21C34.9011 10.21 34.9498 10.2293 34.9818 10.268C35.0151 10.3067 35.0318 10.364 35.0318 10.44Z" fill="white"/>
				</svg>												
				`,
			},
			{
				name: 'Container',
				title: 'Header with container wrapper',
				type: 'header_container',
				prop: { type: 'container', className: 'container mx-auto'},
				icon: `<svg width="52" height="20" viewBox="0 0 52 20" fill="none" xmlns="http://www.w3.org/2000/svg">
				<rect width="52" height="20" rx="5" fill="#A8BBFF"/>
				<rect opacity="0.3" x="2" y="7" width="47" height="6" rx="1" fill="#33375D"/>
				<rect x="9" y="7" width="33" height="6" rx="1" fill="#33375D"/>
				<path d="M16.7599 10.3C16.7599 10.1907 16.7839 10.0953 16.8319 10.014C16.8812 9.93133 16.9452 9.86667 17.0239 9.82C17.1025 9.77333 17.1879 9.75 17.2799 9.75C17.3465 9.75 17.4072 9.75867 17.4619 9.776C17.5179 9.79333 17.5685 9.818 17.6139 9.85C17.6592 9.88067 17.6979 9.91667 17.7299 9.958V9.734C17.6712 9.682 17.6072 9.64333 17.5379 9.618C17.4685 9.59267 17.3825 9.58 17.2799 9.58C17.1825 9.58 17.0912 9.598 17.0059 9.634C16.9219 9.66867 16.8479 9.71867 16.7839 9.784C16.7199 9.848 16.6699 9.924 16.6339 10.012C16.5979 10.1 16.5799 10.196 16.5799 10.3C16.5799 10.404 16.5979 10.5 16.6339 10.588C16.6699 10.676 16.7199 10.7527 16.7839 10.818C16.8479 10.882 16.9219 10.932 17.0059 10.968C17.0912 11.0027 17.1825 11.02 17.2799 11.02C17.3825 11.02 17.4685 11.0073 17.5379 10.982C17.6072 10.9567 17.6712 10.918 17.7299 10.866V10.642C17.6979 10.6833 17.6592 10.72 17.6139 10.752C17.5685 10.7827 17.5179 10.8067 17.4619 10.824C17.4072 10.8413 17.3465 10.85 17.2799 10.85C17.1879 10.85 17.1025 10.8267 17.0239 10.78C16.9452 10.7333 16.8812 10.6687 16.8319 10.586C16.7839 10.5033 16.7599 10.408 16.7599 10.3ZM19.159 10.54C19.159 10.632 19.1797 10.7147 19.221 10.788C19.2637 10.86 19.321 10.9167 19.393 10.958C19.465 10.9993 19.5457 11.02 19.635 11.02C19.7257 11.02 19.8064 10.9993 19.877 10.958C19.949 10.9167 20.0057 10.86 20.047 10.788C20.0897 10.7147 20.111 10.632 20.111 10.54C20.111 10.4467 20.0897 10.364 20.047 10.292C20.0057 10.22 19.949 10.1633 19.877 10.122C19.8064 10.0807 19.7257 10.06 19.635 10.06C19.5457 10.06 19.465 10.0807 19.393 10.122C19.321 10.1633 19.2637 10.22 19.221 10.292C19.1797 10.364 19.159 10.4467 19.159 10.54ZM19.321 10.54C19.321 10.476 19.3344 10.4193 19.361 10.37C19.389 10.3193 19.4264 10.28 19.473 10.252C19.521 10.224 19.575 10.21 19.635 10.21C19.695 10.21 19.7484 10.224 19.795 10.252C19.843 10.28 19.8804 10.3193 19.907 10.37C19.935 10.4193 19.949 10.476 19.949 10.54C19.949 10.604 19.935 10.6607 19.907 10.71C19.8804 10.7593 19.843 10.7987 19.795 10.828C19.7484 10.856 19.695 10.87 19.635 10.87C19.575 10.87 19.521 10.856 19.473 10.828C19.4264 10.7987 19.389 10.7593 19.361 10.71C19.3344 10.6607 19.321 10.604 19.321 10.54ZM22.1408 10.44V11H22.3008V10.42C22.3008 10.3093 22.2722 10.222 22.2148 10.158C22.1588 10.0927 22.0822 10.06 21.9848 10.06C21.9248 10.06 21.8715 10.0733 21.8248 10.1C21.7795 10.1267 21.7415 10.168 21.7108 10.224V10.08H21.5508V11H21.7108V10.44C21.7108 10.3947 21.7202 10.3547 21.7388 10.32C21.7588 10.2853 21.7862 10.2587 21.8208 10.24C21.8568 10.22 21.8982 10.21 21.9448 10.21C22.0088 10.21 22.0575 10.2293 22.0908 10.268C22.1242 10.3067 22.1408 10.364 22.1408 10.44ZM23.6816 10.08V10.23H24.1416V10.08H23.6816ZM23.8316 9.76V11H23.9916V9.76H23.8316ZM25.5941 10.716C25.5941 10.6827 25.6021 10.654 25.6181 10.63C25.6341 10.606 25.6581 10.5873 25.6901 10.574C25.7234 10.5607 25.7661 10.554 25.8181 10.554C25.8741 10.554 25.9267 10.5613 25.9761 10.576C26.0254 10.5893 26.0734 10.612 26.1201 10.644V10.55C26.1107 10.538 26.0927 10.5227 26.0661 10.504C26.0394 10.484 26.0034 10.4667 25.9581 10.452C25.9141 10.436 25.8587 10.428 25.7921 10.428C25.6787 10.428 25.5901 10.4553 25.5261 10.51C25.4634 10.5633 25.4321 10.6347 25.4321 10.724C25.4321 10.7867 25.4467 10.84 25.4761 10.884C25.5054 10.928 25.5441 10.962 25.5921 10.986C25.6414 11.0087 25.6941 11.02 25.7501 11.02C25.8007 11.02 25.8514 11.0107 25.9021 10.992C25.9541 10.9733 25.9974 10.9447 26.0321 10.906C26.0681 10.8673 26.0861 10.8187 26.0861 10.76L26.0541 10.64C26.0541 10.688 26.0421 10.7307 26.0181 10.768C25.9954 10.804 25.9641 10.832 25.9241 10.852C25.8854 10.872 25.8414 10.882 25.7921 10.882C25.7534 10.882 25.7187 10.876 25.6881 10.864C25.6587 10.8507 25.6354 10.8313 25.6181 10.806C25.6021 10.7807 25.5941 10.7507 25.5941 10.716ZM25.5701 10.292C25.5847 10.2813 25.6047 10.2687 25.6301 10.254C25.6554 10.2393 25.6861 10.2267 25.7221 10.216C25.7594 10.2053 25.8007 10.2 25.8461 10.2C25.8741 10.2 25.9007 10.2027 25.9261 10.208C25.9514 10.2133 25.9734 10.222 25.9921 10.234C26.0121 10.246 26.0274 10.2627 26.0381 10.284C26.0487 10.304 26.0541 10.33 26.0541 10.362V11H26.2141V10.34C26.2141 10.28 26.1987 10.2293 26.1681 10.188C26.1387 10.1467 26.0967 10.1153 26.0421 10.094C25.9887 10.0713 25.9261 10.06 25.8541 10.06C25.7687 10.06 25.6954 10.0727 25.6341 10.098C25.5741 10.1233 25.5267 10.1487 25.4921 10.174L25.5701 10.292ZM27.705 9.7C27.705 9.72933 27.7156 9.75533 27.737 9.778C27.7596 9.79933 27.7856 9.81 27.815 9.81C27.8456 9.81 27.8716 9.79933 27.893 9.778C27.9143 9.75533 27.925 9.72933 27.925 9.7C27.925 9.66933 27.9143 9.64333 27.893 9.622C27.8716 9.60067 27.8456 9.59 27.815 9.59C27.7856 9.59 27.7596 9.60067 27.737 9.622C27.7156 9.64333 27.705 9.66933 27.705 9.7ZM27.735 10.08V11H27.895V10.08H27.735ZM30.0345 10.44V11H30.1945V10.42C30.1945 10.3093 30.1658 10.222 30.1085 10.158C30.0525 10.0927 29.9758 10.06 29.8785 10.06C29.8185 10.06 29.7652 10.0733 29.7185 10.1C29.6732 10.1267 29.6352 10.168 29.6045 10.224V10.08H29.4445V11H29.6045V10.44C29.6045 10.3947 29.6138 10.3547 29.6325 10.32C29.6525 10.2853 29.6798 10.2587 29.7145 10.24C29.7505 10.22 29.7918 10.21 29.8385 10.21C29.9025 10.21 29.9512 10.2293 29.9845 10.268C30.0178 10.3067 30.0345 10.364 30.0345 10.44ZM32.0713 11.02C32.1699 11.02 32.2553 11.0007 32.3273 10.962C32.4006 10.922 32.4613 10.8633 32.5093 10.786L32.3793 10.704C32.3459 10.76 32.3053 10.802 32.2573 10.83C32.2093 10.8567 32.1539 10.87 32.0913 10.87C32.0286 10.87 31.9753 10.8567 31.9313 10.83C31.8873 10.8033 31.8539 10.7647 31.8313 10.714C31.8086 10.6633 31.7973 10.602 31.7973 10.53C31.7986 10.4593 31.8106 10.4 31.8333 10.352C31.8573 10.3027 31.8906 10.2653 31.9333 10.24C31.9773 10.2133 32.0299 10.2 32.0913 10.2C32.1433 10.2 32.1886 10.2113 32.2273 10.234C32.2659 10.2567 32.2959 10.288 32.3173 10.328C32.3399 10.368 32.3513 10.4153 32.3513 10.47C32.3513 10.4793 32.3493 10.4913 32.3453 10.506C32.3413 10.5193 32.3373 10.5293 32.3333 10.536L32.3973 10.444H31.7373V10.58H32.5233C32.5233 10.5773 32.5233 10.5713 32.5233 10.562C32.5246 10.5513 32.5253 10.5413 32.5253 10.532C32.5253 10.4347 32.5079 10.3507 32.4733 10.28C32.4386 10.2093 32.3886 10.1553 32.3233 10.118C32.2593 10.0793 32.1819 10.06 32.0913 10.06C32.0006 10.06 31.9206 10.08 31.8513 10.12C31.7833 10.16 31.7299 10.216 31.6913 10.288C31.6539 10.36 31.6353 10.444 31.6353 10.54C31.6353 10.6347 31.6533 10.718 31.6893 10.79C31.7266 10.862 31.7779 10.9187 31.8433 10.96C31.9099 11 31.9859 11.02 32.0713 11.02ZM34.1246 10.08H33.9646V11H34.1246V10.08ZM34.4026 10.256L34.4906 10.124C34.4666 10.0987 34.4399 10.082 34.4106 10.074C34.3826 10.0647 34.3519 10.06 34.3186 10.06C34.2759 10.06 34.2339 10.0767 34.1926 10.11C34.1512 10.1433 34.1172 10.1887 34.0906 10.246C34.0652 10.302 34.0526 10.3667 34.0526 10.44H34.1246C34.1246 10.396 34.1286 10.3567 34.1366 10.322C34.1459 10.2873 34.1619 10.26 34.1846 10.24C34.2072 10.22 34.2386 10.21 34.2786 10.21C34.3052 10.21 34.3272 10.214 34.3446 10.222C34.3619 10.2287 34.3812 10.24 34.4026 10.256Z" fill="#A8BBFF"/>
				</svg>															
				`,
			},
        ];

    }

    /**
     * block自体をwrapしてくれる
     * constructorで与えられたalignmentを代入しようとすると、holderが確定してなく
     * renderでやろうとすると、tuneを表示時に処理が走る
     * @param blockContent
     */
    wrap(blockContent) {
        this.wrapper = this.make("div");
        if (this.data.containerType.includes(' ')){
            let j = this.data.containerType.split(' ');
            for (let i =0; i < j.length; i++){
                this.wrapper.classList.toggle(`${this.data.containerType[i]}`);
            }
        }else{
            this.wrapper.classList.toggle(`${this.data.containerType}`)
        }

       
        this.wrapper.append(blockContent)
        return this.wrapper
    }

    /**
     * rendering block tune
     * @returns {*}
     */
    render() {
        const wrapper = this.make("div");

		wrapper.classList.add('cdx-settings-button-header-wrapper');

        this.alignmentSettings.map(align => {
            const button = document.createElement('button');
            button.classList.add(this.api.styles.settingsButton);
            button.classList.add('cdx-settings-button-header');
            button.innerHTML = align.icon;
            button.type = 'button';

            button.classList.toggle(this.api.styles.settingsButtonActive, align.prop.className === this.data.containerType);
            wrapper.appendChild(button);
            return button
        }).forEach((element, index, elements) => {
            element.addEventListener('click', () => {
                this.data = {
                    containerType: this.alignmentSettings[index].prop.className
                }
                elements.forEach((el, i) => {
                    const {className} = this.alignmentSettings[i].prop;
                    el.classList.toggle(this.api.styles.settingsButtonActive, className === this.data.containerType);
                    //toggle alignment style class for block
                    if (className.includes(' ')){
                        let values = className.split(' ');
                        for( var i = 0; i < values.length; i++){
                            this.wrapper.classList.toggle(`${values[i]}`, className === this.data.containerType)
                        }
                    }else{

                        this.wrapper.classList.toggle(`${className}`, className === this.data.containerType)
                    }
                    // this.wrapper.classList.toggle(this._CSS.alignment[name], name === this.data.alignment)
                });
            });
        });
        // wrapper.appendChild(wrapperColorsText);
        return wrapper;
    }
    /**
     * save
     * @returns {*}
     */
    save() {
        return this.data;
    }

    make(tagName, classNames = null, attributes = {}) {
        const el = document.createElement(tagName);
      
        if (Array.isArray(classNames)) {
          el.classList.add(...classNames);
        } else if (classNames) {
          el.classList.add(classNames);
        }
      
        for (const attrName in attributes) {
          el[attrName] = attributes[attrName];
        }
        return el;
    }
}

module.exports = containerTypeTune;