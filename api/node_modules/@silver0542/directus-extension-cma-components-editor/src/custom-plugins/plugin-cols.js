/**
 * Column Block for the Editor.js.
 *
 * @author Calum Knott (calum@calumk.com)
 * @copyright Calum Knott
 * @license The MIT License (MIT)
 */

/**
 * @typedef {Object} EditorJsColumnsData
 * @description Tool's input and output data format
 */

import { v4 as uuidv4 } from 'uuid';
import Swal from 'sweetalert2';

//  import icon from "./editorjs-columns.svg";
import style from './editorjs-columns.css';

import EditorJS from '@editorjs/editorjs'; // required for npm mode

class EditorJsColumns {
	constructor({ data, config, api, readOnly }) {
		// start by setting up the required parts
		this.api = api;
		this.readOnly = readOnly;
		this.config = config || {};

		this._CSS = {
			block: this.api.styles.block,
			wrapper: 'ce-EditorJsColumns',
		};

		if (!this.readOnly) {
			this.onKeyUp = this.onKeyUp.bind(this);
		}

		this._data = {};

		this.editors = {};

		this.colWrapper = undefined;

		this.editors.cols = [];

		this.data = data;

		if (!Array.isArray(this.data.cols)) {
			this.data.cols = [];
			this.editors.numberOfColumns = 3;
		} else {
			this.editors.numberOfColumns = this.data.cols.length;
		}

		this.data.className = this.data.className ? this.data.className : '';
	}

	static get isReadOnlySupported() {
		return true;
	}

	onKeyUp(e) {
		console.log(e);
		console.log('heyup');
		if (e.code !== 'Backspace' && e.code !== 'Delete') {
			return;
		}
	}

	get CSS() {
		return {
			settingsButton: this.api.styles.settingsButton,
			settingsButtonActive: this.api.styles.settingsButtonActive,
		};
	}

	renderSettings() {
		const buttonSettings = {
			name: 'Custom Settings',
			icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="20" height="20" rx="5" fill="white"/>
            <path d="M10 6.25V5M10 6.25C9.66848 6.25 9.35054 6.3817 9.11612 6.61612C8.8817 6.85054 8.75 7.16848 8.75 7.5C8.75 7.83152 8.8817 8.14946 9.11612 8.38388C9.35054 8.6183 9.66848 8.75 10 8.75M10 6.25C10.3315 6.25 10.6495 6.3817 10.8839 6.61612C11.1183 6.85054 11.25 7.16848 11.25 7.5C11.25 7.83152 11.1183 8.14946 10.8839 8.38388C10.6495 8.6183 10.3315 8.75 10 8.75M6.25 13.75C6.58152 13.75 6.89946 13.6183 7.13388 13.3839C7.3683 13.1495 7.5 12.8315 7.5 12.5C7.5 12.1685 7.3683 11.8505 7.13388 11.6161C6.89946 11.3817 6.58152 11.25 6.25 11.25M6.25 13.75C5.91848 13.75 5.60054 13.6183 5.36612 13.3839C5.1317 13.1495 5 12.8315 5 12.5C5 12.1685 5.1317 11.8505 5.36612 11.6161C5.60054 11.3817 5.91848 11.25 6.25 11.25M6.25 13.75V15M6.25 11.25V5M10 8.75V15M13.75 13.75C14.0815 13.75 14.3995 13.6183 14.6339 13.3839C14.8683 13.1495 15 12.8315 15 12.5C15 12.1685 14.8683 11.8505 14.6339 11.6161C14.3995 11.3817 14.0815 11.25 13.75 11.25M13.75 13.75C13.4185 13.75 13.1005 13.6183 12.8661 13.3839C12.6317 13.1495 12.5 12.8315 12.5 12.5C12.5 12.1685 12.6317 11.8505 12.8661 11.6161C13.1005 11.3817 13.4185 11.25 13.75 11.25M13.75 13.75V15M13.75 11.25V5" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            </div>`,
		};

		const buttonOneCols = {
			name: 'One Col',
			icon: `<div>1</div>`,
		};

		const buttonTwoCols = {
			name: 'Two Cols',
			icon: `<div>2</div>`,
		};

		const buttonThreeCols = {
			name: 'Three Cols',
			icon: `<div>3</div>`,
		};

		const buttonFourCols = {
			name: 'Three Cols',
			icon: `<div>4</div>`,
		};

		const buttonRollCols = {
			name: 'Roll Cols',
			icon: `<div>R</div>`,
		};

		const wrapper = document.createElement('div');

		let buttonSettings_Button = document.createElement('div');
		buttonSettings_Button.classList.add('cdx-settings-button');
		buttonSettings_Button.innerHTML = buttonSettings.icon;

		let buttonOneCols_Button = document.createElement('div');
		buttonOneCols_Button.classList.add('cdx-settings-button');
		buttonOneCols_Button.innerHTML = buttonOneCols.icon;

		let buttonTwoCols_Button = document.createElement('div');
		buttonTwoCols_Button.classList.add('cdx-settings-button');
		buttonTwoCols_Button.innerHTML = buttonTwoCols.icon;

		let buttonThreeCols_Button = document.createElement('div');
		buttonThreeCols_Button.classList.add('cdx-settings-button');
		buttonThreeCols_Button.innerHTML = buttonThreeCols.icon;

		let buttonFourCols_Button = document.createElement('div');
		buttonFourCols_Button.classList.add('cdx-settings-button');
		buttonFourCols_Button.innerHTML = buttonFourCols.icon;

		let buttonRollCols_Button = document.createElement('div');
		buttonRollCols_Button.classList.add('cdx-settings-button');
		buttonRollCols_Button.innerHTML = buttonRollCols.icon;

		buttonSettings_Button.addEventListener('click', (event) => {
			this._updateCols('settings');
		});

		buttonOneCols_Button.addEventListener('click', (event) => {
			this._updateCols(1);
		});

		buttonTwoCols_Button.addEventListener('click', (event) => {
			this._updateCols(2);
		});

		buttonThreeCols_Button.addEventListener('click', (event) => {
			this._updateCols(3);
		});

		buttonFourCols_Button.addEventListener('click', (event) => {
			this._updateCols(4);
		});

		buttonRollCols_Button.addEventListener('click', (event) => {
			this._rollCols();
		});

		wrapper.appendChild(buttonSettings_Button);
		wrapper.appendChild(buttonOneCols_Button);
		wrapper.appendChild(buttonTwoCols_Button);
		wrapper.appendChild(buttonThreeCols_Button);
		wrapper.appendChild(buttonFourCols_Button);
		wrapper.appendChild(buttonRollCols_Button);

		return wrapper;
	}

	_rollCols() {
		// this shifts or "rolls" the columns
		this.data.cols.unshift(this.data.cols.pop());
		this.editors.cols.unshift(this.editors.cols.pop());
		this._rerender();
	}

	async _updateCols(num) {
		// Should probably update to make number dynamic... but this will do for now
		if (num == 'settings') {
			this.colWrapper.querySelector('.settingsWrapper').classList.toggle('active');
			//  console.log('toggle setting wrapper')
			return;
		}
		if (num == 1) {
			if (this.editors.numberOfColumns > 1) {
				let resp = await Swal.fire({
					title: 'Are you sure?',
					text: 'This will delete Columns!',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, delete it!',
				});

				if (resp.isConfirmed) {
					this.editors.numberOfColumns = 1;
					this.data.cols.pop();
					this.editors.cols.pop();
					this._rerender();
				}
			}
		}
		if (num == 2) {
			if (this.editors.numberOfColumns > 2) {
				let resp = await Swal.fire({
					title: 'Are you sure?',
					text: 'This will delete Column 3!',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, delete it!',
				});

				if (resp.isConfirmed) {
					this.editors.numberOfColumns = 2;
					this.data.cols.pop();
					this.editors.cols.pop();
					this._rerender();
				}
			}
		}
		if (num == 3) {
			this.editors.numberOfColumns = 3;
			this._rerender();
			// console.log(3);
		}
		if (num == 4) {
			this.editors.numberOfColumns = 4;
			this._rerender();
			// console.log(3);
		}
	}

	async _rerender() {
		await this.save();
		// console.log(this.colWrapper);

		for (let index = 0; index < this.editors.cols.length; index++) {
			this.editors.cols[index].destroy();
		}
		this.editors.cols = [];

		this.colWrapper.innerHTML = '';

		let settingW = document.createElement('div');
		let settingWW = document.createElement('div');
		settingW.classList.add('settingsWrapper');

		let lbl = document.createElement('label');
		lbl.innerHTML = 'Container class';
		lbl.setAttribute('for', 'ContainerClass');

		let inpt = document.createElement('input');
		inpt.setAttribute('name', 'ContainerClass');
		inpt.setAttribute('type', 'text');
		inpt.setAttribute('value', this.data && this.data.className ? this.data.className : '');

		settingWW.appendChild(lbl);
		settingWW.appendChild(inpt);

		settingW.appendChild(settingWW);

		// console.log("Building the columns");

		for (let index = 0; index < this.editors.numberOfColumns; index++) {
			// console.log("Start column, ", index);
			let col = document.createElement('div');
			col.classList.add('ce-editorjsColumns_col');
			col.classList.add('editorjs_col_' + index);

			let editor_col_id = uuidv4();
			// console.log("generating: ", editor_col_id);
			col.id = editor_col_id;

			this.colWrapper.appendChild(col);

			let editorjs_instance = new EditorJS({
				defaultBlock: 'paragraph',
				holder: editor_col_id,
				tools: this.config.tools,
				data: this.data.cols[index],
				readOnly: this.readOnly,
				minHeight: 50,
			});

			this.editors.cols.push(editorjs_instance);

			settingWW = document.createElement('div');

			lbl = document.createElement('label');
			lbl.innerHTML = `Col ${index + 1} class`;
			lbl.setAttribute('for', `ColClas${index + 1}`);

			inpt = document.createElement('input');
			inpt.setAttribute('name', `ColClass${index + 1}`);
			inpt.setAttribute('type', 'text');
			inpt.setAttribute(
				'value',
				this.data && this.data.cols && this.data.cols[index] && this.data.cols[index].class
					? this.data.cols[index].class
					: ''
			);

			settingWW.appendChild(lbl);
			settingWW.appendChild(inpt);

			settingW.appendChild(settingWW);
		}

		let btn = document.createElement('button');
		btn.innerHTML = 'Save';
		btn.addEventListener('click', () => {
			// this._updateCols('settings');
			this._updateCols('settings');
		});
		settingWW.appendChild(btn);

		this.colWrapper.appendChild(settingW);
	}

	render() {
		// This is needed to prevent the enter / tab keys - it globally removes them!!!

		// it runs MULTIPLE times. - this is not good, but works for now
		//  window.helpme = document.addEventListener('keydown', function(event) {

		//      // if (event.key === "Enter" && event.altKey) {
		//      // 	console.log("ENTER ALT Captured")
		//      // 	console.log(event.target)

		//      // 	// let b = event.target.dispatchEvent(new KeyboardEvent('keyup',{'key':'a'}));

		//      // 	event.target.innerText += "Aß"

		//      // 	// console.log(b)
		//      // }
		//      // else
		//      if (event.key === "Enter") {
		//          event.stopImmediatePropagation();
		//          event.preventDefault();
		//          console.log("ENTER Captured")
		//      }
		//      if (event.key === "Tab") {
		//          event.stopImmediatePropagation();
		//          event.preventDefault();
		//          console.log("TAB Captured")
		//      }
		//  }, true);

		// console.log("Generating Wrapper");

		// console.log(this.api.blocks.getCurrentBlockIndex());

		this.colWrapper = document.createElement('div');
		this.colWrapper.classList.add('ce-editorjsColumns_wrapper');

		let settingW = document.createElement('div');
		let settingWW = document.createElement('div');
		settingW.classList.add('settingsWrapper');

		let lbl = document.createElement('label');
		lbl.innerHTML = 'Container class';
		lbl.setAttribute('for', 'ContainerClass');

		let inpt = document.createElement('input');
		inpt.setAttribute('name', 'ContainerClass');
		inpt.setAttribute('type', 'text');
		inpt.setAttribute('value', this.data && this.data.className ? this.data.className : '');

		settingWW.appendChild(lbl);
		settingWW.appendChild(inpt);

		settingW.appendChild(settingWW);

		for (let index = 0; index < this.editors.cols.length; index++) {
			this.editors.cols[index].destroy();
		}

		// console.log(this.editors.cols);
		this.editors.cols = []; //empty the array of editors
		// console.log(this.editors.cols);

		// console.log("Building the columns");

		for (let index = 0; index < this.editors.numberOfColumns; index++) {
			// console.log("Start column, ", index);
			let col = document.createElement('div');
			col.classList.add('ce-editorjsColumns_col');
			col.classList.add('editorjs_col_' + index);

			let editor_col_id = uuidv4();
			// console.log("generating: ", editor_col_id);
			col.id = editor_col_id;

			this.colWrapper.appendChild(col);

			let editorjs_instance = new EditorJS({
				defaultBlock: 'paragraph',
				holder: editor_col_id,
				tools: this.config.tools,
				data: this.data.cols[index],
				readOnly: this.readOnly,
				minHeight: 50,
			});

			this.editors.cols.push(editorjs_instance);
			settingWW = document.createElement('div');

			lbl = document.createElement('label');
			lbl.innerHTML = `Col ${index + 1} class`;
			lbl.setAttribute('for', `ColClas${index + 1}`);

			inpt = document.createElement('input');
			inpt.setAttribute('name', `ColClass${index + 1}`);
			inpt.setAttribute('type', 'text');
			inpt.setAttribute(
				'value',
				this.data && this.data.cols && this.data.cols[index] && this.data.cols[index].class
					? this.data.cols[index].class
					: ''
			);

			settingWW.appendChild(lbl);
			settingWW.appendChild(inpt);

			settingW.appendChild(settingWW);

			// console.log("End column, ", index);
		}
		let btn = document.createElement('button');
		btn.innerHTML = 'Save';
		btn.addEventListener('click', () => {
			// this._updateCols('settings');
			this._updateCols('settings');
		});
		settingWW.appendChild(btn);

		this.colWrapper.appendChild(settingW);
		return this.colWrapper;
	}

	async save() {
		if (!this.readOnly) {
			// console.log("Saving");
			for (let index = 0; index < this.editors.cols.length; index++) {
				let colData = await this.editors.cols[index].save();
				this.data.cols[index] = colData;
				this.data.cols[index].class = this.colWrapper.querySelector(`[name="ColClass${index + 1}"]`).value;
			}
		}
		this.data.className = this.colWrapper.querySelector('[name="ContainerClass"]').value;
		return this.data;
	}

	static get toolbox() {
		return {
			icon: `<svg width="14" height="14" viewBox="0 -1 14 14" xmlns="http://www.w3.org/2000/svg">
             <defs></defs>
             <rect x="1.194" y="-0.041" width="11.601" height="12.11" rx="1" ry="1" style="fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 1.5px;"></rect>
             <path style="stroke: rgb(0, 0, 0); stroke-width:1.5px" d="M 7.032 -0.034 L 6.948 11.842"></path>
           </svg>`,
			title: 'Columns',
		};
	}
}

export { EditorJsColumns as default };
