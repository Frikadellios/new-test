import Personality from '@editorjs/personality';
import Uploader from './editorjs-uploader.js';

/**
 * Patch allows custom uploader.
 * https://github.com/editor-js/personality/blob/master/src/index.js
 */

const LOADER_DELAY = 500;

export default class extends Personality {
	constructor(params) {
		super(params);
		this.nodes = {
			wrapper: null,
			headerClass: null,
			headerWrapperClass: null,
			showPhone: null,
			phoneAsImage: null,
			phone: null,
			logotype: null,
		};

		this.config.uploader = params.config.uploader;
		this.uploader = new Uploader({
			config: this.config,
			getCurrentFile: () => this.data.logotype,
			onUpload: (response) => this.onUpload({ body: response }),
			onError: (error) => this.uploadingFailed(error),
		});

		// Until get https://github.com/editor-js/attaches/issues/50 solved, this is required.
		this.onUpload = (response) => {
			super.onUpload(response);
			params.block.save().then((state) => {
				params.api.blocks.update(state.id, state.data);
			});
		};

		this.settings = [
			{
				name: 'withBorder',
				icon: `<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z"/></svg>`,
			},
			{
				name: 'stretched',
				icon: `<svg width="17" height="10" viewBox="0 0 17 10" xmlns="http://www.w3.org/2000/svg"><path d="M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z"/></svg>`,
			},
			{
				name: 'withBackground',
				icon: `<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z"/></svg>`,
			},
		];
	}

	setFullImageSource(image) {
		const imageUrlWithToken = this.uploader.config.uploader.addTokenToURL(image) + '&key=system-medium-cover';
		this.nodes.photo.style.background = `url('${imageUrlWithToken}') center center / cover no-repeat`;
	}

	showFullImage() {
		setTimeout(() => {
			this.nodes.photo.classList.remove(this.CSS.loader);
			this.setFullImageSource(this.data.logotype);
		}, LOADER_DELAY);
	}

	render() {


		const { headerClass, headerWrapperClass, showPhone, phoneAsImage, phone, logotype } = this.data;

		this.nodes.wrapper = this.make('div', this.CSS.wrapper);

		this.nodes.wrapperParams = this.make('div', this.CSS.wrapperParams);
		this.nodes.wrapperHeader = this.make('div', this.CSS.wrapperHeader);

		this.nodes.headerClass = this.make('div', this.CSS.headerClass, {
			contentEditable: true,
		});
		const headerClassInput = this.make('input', '', {
			contentEditable: true,
			type: 'text',
			name: 'headerClass',
		});
		const headerClassLabel = this.make(
			'label',
			'',
			{
				contentEditable: false,
				for: 'headerClass',
			},
			'Header Class'
		);

		this.nodes.headerWrapperClass = this.make('div', this.CSS.headerWrapperClass, {
			contentEditable: true,
		});

		const headerWrapperInput = this.make('input', '', {
			contentEditable: true,
			type: 'text',
			name: 'headerWrapper',
		});
		const headerWrapperLabel = this.make(
			'label',
			'',
			{
				contentEditable: false,
				for: 'headerWrapper',
			},
			'Header Inner Wrapper Class'
		);

		this.nodes.showPhone = this.make('div', this.CSS.showPhone, {
			contentEditable: true,
		});

		const headerShowPhoneInput = this.make('input', '', {
			// contentEditable: true,
			type: 'checkbox',
			checked: 'true',
			value: 'showPhone',
			name: 'headerShowPhone',
		});
		const headerShowPhoneLabel = this.make(
			'label',
			'',
			{
				contentEditable: false,
				for: 'headerShowPhone',
			},
			'Show Phone'
		);

		this.nodes.phoneAsImage = this.make('div', this.CSS.phoneAsImage, {
			contentEditable: true,
		});

		const headerPhoneAsImageInput = this.make('input', '', {
			// contentEditable: true,
			type: 'checkbox',
			checked: false,
			value: 'showPhoneAsImage',
			name: 'showPhoneAsImage',
		});
		const headerPhoneAsImageLabel = this.make(
			'label',
			'',
			{
				contentEditable: false,
				for: 'showPhoneAsImage',
			},
			'Phone as Image'
		);

		this.nodes.phone = this.make(
			'div',
			this.CSS.phone,
			{
				contentEditable: true,
			},
			'Question? Call: ˜!PHONE!˜'
		);

		this.nodes.logotype = this.make('div', this.CSS.logotype);

		if (logotype) {
			this.nodes.logotype.style.background = `url('${logotype}') center center / cover no-repeat`;
		}

		if (headerClass) {
			this.nodes.headerClass.input.value = headerClass;
		} else {
			this.nodes.headerClass.dataset.placeholder = this.config.headerClassPlaceholder;
		}

		this.nodes.logotype.addEventListener('click', () => {
			this.uploader.uploadSelectedFile({
				onPreview: () => {
					this.addLoader();
				},
			});
		});

		this.nodes.headerClass.appendChild(headerClassLabel);
		this.nodes.headerClass.appendChild(headerClassInput);

		this.nodes.headerWrapperClass.appendChild(headerWrapperLabel);
		this.nodes.headerWrapperClass.appendChild(headerWrapperInput);

		headerShowPhoneLabel.prepend(headerShowPhoneInput);
		this.nodes.showPhone.appendChild(headerShowPhoneLabel);

		headerPhoneAsImageLabel.prepend(headerPhoneAsImageInput);
		this.nodes.phoneAsImage.appendChild(headerPhoneAsImageLabel);

		this.nodes.wrapperParams.appendChild(this.nodes.headerClass);
		this.nodes.wrapperParams.appendChild(this.nodes.headerWrapperClass);
		this.nodes.wrapperParams.appendChild(this.nodes.showPhone);
		this.nodes.wrapperParams.appendChild(this.nodes.phoneAsImage);

		this.nodes.wrapperHeader.appendChild(this.nodes.logotype);
		this.nodes.wrapperHeader.appendChild(this.nodes.phone);

		this.nodes.wrapper.appendChild(this.nodes.wrapperParams);
		this.nodes.wrapper.appendChild(this.nodes.wrapperHeader);

		// const result = this.nodes.wrapper;

		if (this.data.logotype) {
			this.setFullImageSource(this.data.logotype);
		}

		return this.nodes.wrapper;
	}

	save(toolsContent) {
		// const name = toolsContent.querySelector(`.${this.CSS.name}`).textContent;
		// const description = toolsContent.querySelector(`.${this.CSS.description}`).textContent;
		// const link = toolsContent.querySelector(`.${this.CSS.link}`).textContent;
		const logotype = this.data.logotype;
		const headerClass = toolsContent.querySelector(`.${this.CSS.headerClass} input`).value;
		const headerWrapperClass = toolsContent.querySelector(`.${this.CSS.headerWrapperClass} input`).value;
		const showPhone = toolsContent.querySelector(`.${this.CSS.showPhone} input`).checked;
		const phoneAsImage = toolsContent.querySelector(`.${this.CSS.phoneAsImage} input`).checked;
		const phone = toolsContent.querySelector(`.${this.CSS.phone}`).textContent;

		/**
		 * Fill missing fields with empty strings
		 */
		Object.assign(this.data, {
			headerClass: headerClass.trim() || '',
			headerWrapperClass: headerWrapperClass.trim() || '',
			showPhone: showPhone || false,
			phoneAsImage: phoneAsImage || false,
			phone: phone.trim() || '',
			logotype: logotype || '',
		});

		return this.data;
	}
	stopLoading() {
		setTimeout(() => {
			this.nodes.logotype.classList.remove(this.CSS.loader);
			this.nodes.logotype.removeAttribute('style');
		}, LOADER_DELAY);
	}

	/**
	 * Show loader when file upload started
	 */
	addLoader() {
		this.nodes.logotype.style.background = 'none';
		this.nodes.logotype.classList.add(this.CSS.loader);
	}

	/**
	 * If file uploading failed, remove loader and show notification
	 * @param {string} errorMessage -  error message
	 */
	uploadingFailed(errorMessage) {
		this.stopLoading();

		this.api.notifier.show({
			message: errorMessage,
			style: 'error',
		});
	}

	get CSS() {
		return {
			baseClass: this.api.styles.block,
			input: this.api.styles.input,
			loader: this.api.styles.loader,

			/**
			 * Tool's classes
			 */
			wrapper: 'cdx-componentWrapper',
			wrapperParams: 'cdx-headerParams',
			wrapperHeader: 'cdx-header',
			headerClass: 'cdx-headerParams__headerClass',
			headerWrapperClass: 'cdx-headerParams__WrapperClass',
			showPhone: 'cdx-headerParams__showPhone',
			phoneAsImage: 'cdx-headerParams__phoneAsImage',

			phone: 'cdx-header__phone',
			logotype: 'cdx-header__logotype',
			name: 'cdx-header__name',

			logotype: 'cdx-header__logotype',
			link: 'cdx-heade__link',
			description: 'cdx-heade__description',
		};
	}

	validate(savedData) {
		/**
		 * Return false if fields are empty
		 */
		return (
			savedData.headerClass ||
			savedData.headerWrapperClass ||
			savedData.showPhone ||
			savedData.phoneAsImage ||
			savedData.phone ||
			savedData.logotype
		);
	}

	make(tagName, classNames = null, attributes = {}, content = '') {
		const el = document.createElement(tagName);

		if (Array.isArray(classNames)) {
			el.classList.add(...classNames);
		} else if (classNames) {
			el.classList.add(classNames);
		}

		for (const attrName in attributes) {
			el[attrName] = attributes[attrName];
		}
		if (content !== '') {
			el.innerHTML = content;
		}

		return el;
	}

	renderSettings() {
		const settings = [
			{
				name: 'withBorder',
				icon: `<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z"/></svg>`,
			},
			{
				name: 'stretched',
				icon: `<svg width="17" height="10" viewBox="0 0 17 10" xmlns="http://www.w3.org/2000/svg"><path d="M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z"/></svg>`,
			},
			{
				name: 'withBackground',
				icon: `<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z"/></svg>`,
			},
		];
		const wrapper = document.createElement('div');

		settings.forEach((tune) => {
			let button = document.createElement('div');

			button.classList.add('cdx-settings-button');
			button.innerHTML = tune.icon;
			wrapper.appendChild(button);
		});

		return wrapper;
	}
}
