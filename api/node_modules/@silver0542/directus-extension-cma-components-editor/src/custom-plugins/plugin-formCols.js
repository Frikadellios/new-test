/**
 * Column Block for the Editor.js.
 *
 * @author Calum Knott (calum@calumk.com)
 * @copyright Calum Knott
 * @license The MIT License (MIT)
 */

/**
 * @typedef {Object} EditorJsColumnsData
 * @description Tool's input and output data format
 */

import { v4 as uuidv4 } from 'uuid';
import Swal from 'sweetalert2';

import AlignmentTuneTool from 'editorjs-text-alignment-blocktune';
import TextColorTune from './tune-text-color.js';
import containerBgTune from './tune-background.js';

//  import icon from "./editorjs-columns.svg";

import EditorJS from '@editorjs/editorjs'; // required for npm mode

class FormCols {
	constructor({ data, config, api, readOnly }) {
		// start by setting up the required parts
		this.api = api;
		this.readOnly = readOnly;
		this.config = config || {};

		this._CSS = {
			block: this.api.styles.block,
			wrapper: 'ce-EditorJsColumns',
		};

		if (!this.readOnly) {
			this.onKeyUp = this.onKeyUp.bind(this);
		}

		this._data = {};

		this.editors = {};

		this.colWrapper = undefined;

		this.editors.cols = [];

		this.data = data;

		if (!Array.isArray(this.data.cols)) {
			this.data.cols = [];
			this.data.titles = [];
			this.data.container = this.data.container ? this.data.container : null;

			this.data.type = this.data.type ? this.data.type : 'v1';
			this.editors.numberOfColumns = 3;
		} else {
			this.editors.numberOfColumns = this.data.cols.length;
		}

		this.data.action = this.data.action ? this.data.action : 'checkout';
		//  console.log('Action', this.data.action);

		this.defaultCol2 = {
			time: 1671041402726,
			blocks: [
				{
					id: uuidv4(),
					type: 'formColTitle',
					data: {
						wrapperClass: 'lg:flex-1 lg:grow lg:basis-0 lg:min-w-0 flex-1 basis-full mb-5 border-4 border-primary-100',
						titleClass: 'w-full text-xl',
						title: 'Step 3 - Who Is Moving?',
					},
					tunes: {
						alignmentTune: {
							alignment: 'center',
						},
						texColorTune: {
							textColor: 'white',
						},
						backgroundTune: {
							containerBg: 'primary-50',
						},
					},
				},
				{
					id: uuidv4(),
					type: 'moveType',
					data: {
						check_row1_title: 'Individual',
						check_row1_text: 'Select Individual If You Are The Only Onemoving.',
						check_row1_className: 'mb-2 mt-1 p-3',
						check_row1_info: true,
						check_row2_title: 'Family',
						check_row2_text: 'Select Family If You Move With Your Family.',
						check_row2_className: 'mb-2 mt-1 p-3',
						check_row2_info: true,
						check_row2_additional: false,
						check_row3_title: 'Business',
						check_row3_text: 'Select Business If A Business Is Moving.',
						check_row3_className: 'mb-2 mt-1 p-3',
						check_row3_info: true,
						business_label: 'Business Name',
						business_className: 'justify-end pr-5',
						business_labelClass: 'text-right pr-1 justify-end',
						business_inputWrapperClass: 'justify-end w-2/3',
						business_inputClass: 'w-full',
					},
				},
			],
		};
		this.defaultCol1 = {
			time: 1671041402726,
			blocks: [
				{
					id: uuidv4(),
					type: 'formColTitle',
					data: {
						wrapperClass: 'lg:flex-1 lg:grow lg:basis-0 lg:min-w-0 flex-1 basis-full mb-5 border-4 border-primary-100',
						titleClass: 'w-full text-xl',
						title: 'Step 2 - Enter Address Details',
					},
					tunes: {
						alignmentTune: {
							alignment: 'center',
						},
						texColorTune: {
							textColor: 'white',
						},
						backgroundTune: {
							containerBg: 'primary-50',
						},
					},
				},
				{
					id: uuidv4(),
					type: 'oldAddress',
					data: {
						check_row1_title: 'Old Address',
						check_row1_text: '',
						check_row1_className: 'text-sm font-medium pr-5 py-3',
						check_row1_info: false,
						address_visible: true,
						address_label: 'Old Address',
						address_className: 'justify-end pr-5 mt-5',
						address_inputClassName: 'w-full',
						address_labelClassName: 'text-right pr-1 justify-end',
						address_inputWrapperClassName: 'relative justify-end xl:w-2/3 lg:w-2/4 w-2/4 relative',
						address_isRequired: true,

						line2_visible: true,
						line2_label: 'Address Line 2',
						line2_className: 'justify-end pr-5',
						line2_inputClassName: 'xl:w-2/3 lg:w-2/4 w-2/4',
						line2_labelClassName: 'text-right pr-1 justify-end',
						line2_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						line2_isRequired: false,

						city_visible: true,
						city_label: 'Old City',
						city_className: 'justify-end pr-5',
						city_inputClassName: 'w-full',
						city_labelClassName: 'text-right pr-1 justify-end',
						city_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						city_isRequired: true,
						state_visible: true,
						state_label: 'Old State',
						state_className: 'justify-end pr-5',
						state_inputClassName: 'w-full',
						state_labelClassName: 'text-right pr-1 justify-end',
						state_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						state_isRequired: true,
						zip_visible: true,
						zip_label: 'Old Zip Code',
						zip_className: 'justify-end pr-5',
						zip_inputClassName: 'w-full',
						zip_labelClassName: 'text-right pr-1 justify-end',
						zip_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						zip_isRequired: true,
						autocomplete: true,
						showDropDown: true,
					},
				},
				{
					id: uuidv4(),
					type: 'newAddress',
					data: {
						check_row1_title: 'New Address',
						check_row1_text: '',
						check_row1_className: 'text-sm font-medium pr-5 py-3',
						check_row1_info: false,
						address_visible: true,
						address_label: 'New Address',
						address_className: 'justify-end pr-5 mt-5',
						address_inputClassName: 'w-full',
						address_labelClassName: 'text-right pr-1 justify-end',
						address_inputWrapperClassName: 'relative justify-end xl:w-2/3 lg:w-2/4 w-2/4 relative',
						address_isRequired: true,

						line2_visible: true,
						line2_label: 'Address Line 2',
						line2_className: 'justify-end pr-5',
						line2_inputClassName: 'xl:w-2/3 lg:w-2/4 w-2/4',
						line2_labelClassName: 'text-right pr-1 justify-end',
						line2_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						line2_isRequired: false,

						city_visible: true,
						city_label: 'New City',
						city_className: 'justify-end pr-5',
						city_inputClassName: 'w-full',
						city_labelClassName: 'text-right pr-1 justify-end',
						city_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						city_isRequired: true,
						state_visible: true,
						state_label: 'New State',
						state_className: 'justify-end pr-5',
						state_inputClassName: 'w-full',
						state_labelClassName: 'text-right pr-1 justify-end',
						state_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						state_isRequired: true,
						zip_visible: true,
						zip_label: 'New Zip Code',
						zip_className: 'justify-end pr-5',
						zip_inputClassName: 'w-full',
						zip_labelClassName: 'text-right pr-1 justify-end',
						zip_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						zip_isRequired: true,
						autocomplete: true,
						showDropDown: true,
					},
				},
			],
		};
		this.defaultCol0 = {
			time: 1671041402726,
			blocks: [
				{
					id: uuidv4(),
					type: 'formColTitle',
					data: {
						wrapperClass: 'lg:flex-1 lg:grow lg:basis-0 lg:min-w-0 flex-1 basis-full mb-5 border-4 border-primary-100',
						titleClass: 'w-full text-xl',
						title: 'Step 1 - Select Move Type',
					},
					tunes: {
						alignmentTune: {
							alignment: 'center',
						},
						texColorTune: {
							textColor: 'white',
						},
						backgroundTune: {
							containerBg: 'primary-50',
						},
					},
				},
				{
					id: uuidv4(),
					type: 'moveDuration',
					data: {
						check_row1_title: 'Permanent',
						check_row1_text: 'Select Permanent If You Have No Plans To Move Back To Your Old Address.',
						check_row1_className: 'mb-7 mt-1',
						check_row1_info: true,
						start_label: 'Start forwarding on',
						start_className: 'justify-end mb-7 pr-5',
						start_iconClass: 'absolute right-1',
						start_labelClass: 'text-right pr-1 justify-end',
						start_inputWrapperClass: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4 relative',
						check_row2_title: 'Temporary',
						check_row2_text: 'Select Temporary If You Plan To Move Back To Your Old Address Within 6 Months.',
						check_row2_className: 'mb-7',
						check_row2_info: true,
						start2_label: 'Start forwarding on',
						start2_className: 'justify-end pr-5',
						start2_iconClass: 'absolute right-1',
						start2_labelClass: 'text-right pr-1 justify-end',
						start2_inputWrapperClass: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4 relative',
						stop_label: 'Stop forwarding on',
						stop_className: 'justify-end mb-7 pr-5',
						stop_iconClass: 'absolute right-1',
						stop_labelClass: 'text-right pr-1 justify-end',
						stop_inputWrapperClass: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4 relative',
						start_inputClass: 'w-full',
						start2_inputClass: 'w-full',
						stop_inputClass: 'w-full',
					},
				},
				{
					id: uuidv4(),
					type: 'personalInformation',
					data: {
						check_row1_title: 'Personal Information',
						check_row1_text: '',
						check_row1_className: 'text-sm font-medium pr-5 py-3',
						check_row1_info: true,
						title_visible: true,
						title_label: 'Title',
						title_className: 'justify-end pr-5 mt-5',
						title_inputClassName: 'w-full',
						title_labelClassName: 'text-right pr-1 justify-end',
						title_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						title_isRequired: true,
						title_items: 'Mr, Ms, Mrs',
						firstName_visible: true,
						firstName_label: 'First Name',
						firstName_className: 'justify-end pr-5',
						firstName_inputClassName: 'w-full',
						firstName_labelClassName: 'text-right pr-1 justify-end',
						firstName_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						firstName_isRequired: 'showInfo',
						lastName_visible: true,
						lastName_label: 'Last Name',
						lastName_className: 'justify-end pr-5',
						lastName_inputClassName: 'w-full',
						lastName_labelClassName: 'text-right pr-1 justify-end',
						lastName_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						lastName_isRequired: true,
						phone_visible: true,
						phone_label: 'Phone',
						phone_className: 'justify-end pr-5',
						phone_inputClassName: 'w-full',
						phone_labelClassName: 'text-right pr-1 justify-end',
						phone_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						phone_isRequired: true,
						email_visible: true,
						email_label: 'Email',
						email_className: 'justify-end pr-5',
						email_inputClassName: 'w-full',
						email_labelClassName: 'text-right pr-1 justify-end',
						email_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						email_isRequired: true,
						dob_visible: true,
						dob_label: 'Year of Birth',
						dob_className: 'justify-end pr-5',
						dob_inputClassName: 'w-full',
						dob_labelClassName: 'text-right pr-1 justify-end',
						dob_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
						dob_isRequired: true,
					},
				},
				{
					id: uuidv4(),
					type: 'paragraph',
					data: {
						text: 'YOU ACKNOWLEDGE AND AGREE THAT BY USING THE SITE, ANY APPLICATIONS, AND THE SERVICES, YOU ARE AT LEAST 18 YEARS OF AGE AND THAT YOU ARE THE PERSON, EXECUTOR, POWER OF ATTORNEY, GUARDIAN, AUTHORIZED OFFICER OR AGENT OF THE PERSON FOR WHOM MAIL SHOULD BE FORWARDED BY THE USPS®, UNDER THIS ORDER.YOU ACKNOWLEDGE AND AGREE THAT BY USING THE SITE, ANY APPLICATIONS, AND THE SERVICES, YOU ARE AT LEAST 18 YEARS OF AGE AND THAT YOU ARE THE PERSON, EXECUTOR, POWER OF ATTORNEY, GUARDIAN, AUTHORIZED OFFICER OR AGENT OF THE PERSON FOR WHOM MAIL SHOULD BE FORWARDED BY THE USPS®, UNDER THIS ORDER.',
					},
					tunes: {
						alignmentTune: {
							alignment: 'left',
						},
						texColorTune: {
							textColor: 'primary-50',
						},
						textStyleTune: {
							textStyle: 'text-xs',
						},
						paddings: {
							Padding: {
								padding: '',
								paddingB: '5',
								paddingClass: 'pt-5 pb-5 pl-2 pr-2',
								paddingL: '2',
								paddingR: '2',
								paddingT: '5',
								paddingX: '0',
								paddingY: '0',
							},
						},
						margins: {
							Margin: {
								marginT: '0',
								marginB: '0',
								marginX: '0',
								marginClass: 'm-0',
								margin: '0',
							},
						},
					},
				},
			],
		};
	}

	static get isReadOnlySupported() {
		return true;
	}

	onKeyUp(e) {
		//  console.log(e)
		//  console.log("heyup")
		if (e.code !== 'Backspace' && e.code !== 'Delete') {
			return;
		}
	}

	get CSS() {
		return {
			settingsButton: this.api.styles.settingsButton,
			settingsButtonActive: this.api.styles.settingsButtonActive,
		};
	}

	renderSettings() {
		//  const buttonTwoCols = {
		//      name: "Two Cols",
		//      icon: `<div>2</div>`,
		//  };

		const buttonSettings = {
			name: 'Custom Settings',
			icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
             <rect width="20" height="20" rx="5" fill="white"/>
             <path d="M10 6.25V5M10 6.25C9.66848 6.25 9.35054 6.3817 9.11612 6.61612C8.8817 6.85054 8.75 7.16848 8.75 7.5C8.75 7.83152 8.8817 8.14946 9.11612 8.38388C9.35054 8.6183 9.66848 8.75 10 8.75M10 6.25C10.3315 6.25 10.6495 6.3817 10.8839 6.61612C11.1183 6.85054 11.25 7.16848 11.25 7.5C11.25 7.83152 11.1183 8.14946 10.8839 8.38388C10.6495 8.6183 10.3315 8.75 10 8.75M6.25 13.75C6.58152 13.75 6.89946 13.6183 7.13388 13.3839C7.3683 13.1495 7.5 12.8315 7.5 12.5C7.5 12.1685 7.3683 11.8505 7.13388 11.6161C6.89946 11.3817 6.58152 11.25 6.25 11.25M6.25 13.75C5.91848 13.75 5.60054 13.6183 5.36612 13.3839C5.1317 13.1495 5 12.8315 5 12.5C5 12.1685 5.1317 11.8505 5.36612 11.6161C5.60054 11.3817 5.91848 11.25 6.25 11.25M6.25 13.75V15M6.25 11.25V5M10 8.75V15M13.75 13.75C14.0815 13.75 14.3995 13.6183 14.6339 13.3839C14.8683 13.1495 15 12.8315 15 12.5C15 12.1685 14.8683 11.8505 14.6339 11.6161C14.3995 11.3817 14.0815 11.25 13.75 11.25M13.75 13.75C13.4185 13.75 13.1005 13.6183 12.8661 13.3839C12.6317 13.1495 12.5 12.8315 12.5 12.5C12.5 12.1685 12.6317 11.8505 12.8661 11.6161C13.1005 11.3817 13.4185 11.25 13.75 11.25M13.75 13.75V15M13.75 11.25V5" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
             </svg>
             </div>`,
		};
		const buttonThreeCols = {
			name: 'Default Layout',
			icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
             <rect width="20" height="20" rx="5" fill="white"/>
             <rect x="3" y="5" width="4" height="10" rx="1" fill="#33375D"/>
             <rect x="8" y="5" width="4" height="10" rx="1" fill="#33375D"/>
             <rect x="13" y="5" width="4" height="10" rx="1" fill="#33375D"/>
             </svg>
             </div>`,
		};

		const buttonFourCols = {
			name: 'Custom 1',
			icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
             <rect width="20" height="20" rx="5" fill="white"/>
             <rect x="3" y="5" width="4" height="9" rx="1" fill="#33375D"/>
             <rect x="8" y="5" width="9" height="4" rx="1" fill="#33375D"/>
             <rect x="8" y="10" width="9" height="4" rx="1" fill="#33375D"/>
             </svg>
             </div>`,
		};

		//  const buttonRollCols = {
		//      name: "Roll Cols",
		//      icon: `<div>R</div>`,
		//  };

		const wrapper = document.createElement('div');

		//  let buttonTwoCols_Button = document.createElement("div");
		//  buttonTwoCols_Button.classList.add("cdx-settings-button");
		//  buttonTwoCols_Button.innerHTML = buttonTwoCols.icon;

		let buttonSettings_Button = document.createElement('div');
		buttonSettings_Button.classList.add('cdx-settings-button');
		buttonSettings_Button.innerHTML = buttonSettings.icon;

		let buttonThreeCols_Button = document.createElement('div');
		buttonThreeCols_Button.classList.add('cdx-settings-button');
		buttonThreeCols_Button.innerHTML = buttonThreeCols.icon;

		let buttonFourCols_Button = document.createElement('div');
		buttonFourCols_Button.classList.add('cdx-settings-button');
		buttonFourCols_Button.innerHTML = buttonFourCols.icon;

		//  let buttonRollCols_Button = document.createElement("div");
		//  buttonRollCols_Button.classList.add("cdx-settings-button");
		//  buttonRollCols_Button.innerHTML = buttonRollCols.icon;

		//  buttonTwoCols_Button.addEventListener("click", (event) => {
		//      this._updateCols(2);
		//  });

		buttonSettings_Button.addEventListener('click', (event) => {
			this._updateCols('settings');
		});

		buttonThreeCols_Button.addEventListener('click', (event) => {
			this._updateCols(3);
		});

		buttonFourCols_Button.addEventListener('click', (event) => {
			this._updateCols(2);
		});

		//  buttonRollCols_Button.addEventListener("click", (event) => {
		//      this._rollCols();
		//  });

		//  wrapper.appendChild(buttonTwoCols_Button);
		wrapper.appendChild(buttonSettings_Button);
		wrapper.appendChild(buttonThreeCols_Button);
		wrapper.appendChild(buttonFourCols_Button);
		//  wrapper.appendChild(buttonRollCols_Button);

		return wrapper;
	}

	_rollCols() {
		// this shifts or "rolls" the columns
		this.data.cols.unshift(this.data.cols.pop());
		this.editors.cols.unshift(this.editors.cols.pop());
		this._rerender();
	}

	async _updateCols(num) {
		// Should probably update to make number dynamic... but this will do for now

		if (num == 'settings') {
			this.colWrapper.querySelector('.settingsWrapper').classList.toggle('active');
			//  console.log('toggle setting wrapper')
			return;
		}
		if (num == 2) {
			if (this.editors.numberOfColumns == 3) {
				//  let resp = await Swal.fire({
				//      title: "Are you sure?",
				//      text: "This will delete Column 3!",
				//      icon: "warning",
				//      showCancelButton: true,
				//      confirmButtonColor: "#3085d6",
				//      cancelButtonColor: "#d33",
				//      confirmButtonText: "Yes, delete it!",
				//  });

				//  if (resp.isConfirmed) {
				this.data.type = 'v2';
				this.editors.numberOfColumns = 3;
				//  this.data.cols.pop();
				//  this.editors.cols.pop();
				this._rerender('v2');
				//  }
			}
		}
		if (num == 3) {
			this.editors.numberOfColumns = 3;
			this.data.type = 'v1';
			this._rerender('v1');
			// console.log(3);
		}
	}

	async _rerender(e = 'v1') {
		await this.save();
		// console.log('ColWRAPPER ->>>>>>> ',this.data);

		for (let index = 0; index < this.editors.cols.length; index++) {
			this.editors.cols[index].destroy();
		}
		this.editors.cols = [];

		this.colWrapper.innerHTML = '';

		let settingW = document.createElement('div');
		let settingWW = document.createElement('div');
		settingW.classList.add('settingsWrapper');

		let lbl = document.createElement('label');
		lbl.innerHTML = 'Container class';
		lbl.setAttribute('for', 'ContainerClass');

		let inpt = document.createElement('input');
		inpt.setAttribute('name', 'ContainerClass');
		inpt.setAttribute('type', 'text');
		inpt.setAttribute(
			'value',
			this.data && this.data.container
				? this.data.container
				: 'container mx-auto flex flex-wrap flex-row justify-between items-top gap-x-5 md:px-5 px-0'
		);

		let btn = document.createElement('button');
		btn.innerHTML = 'Save';
		btn.addEventListener('click', () => {
			// this._updateCols('settings');
			this.toggleClass('settings');
		});

		let dropDown = document.createElement('select');
		dropDown.setAttribute('name', 'ActionType');
		dropDown.innerHTML = `
        <option ${this.data.action == 'checkout' ? 'selected' : ''} value="checkout">Save to CRM -> Checkout</option>
        <option ${this.data.action == 'ty' ? 'selected' : ''} value="ty">Save to CRM -> Thank You Page</option>
        <option ${this.data.action == 'tyWoS' ? 'selected' : ''} value="tyWoS">Thank You Page without SAVING</option>
        <option ${
					this.data.action == 'checkoutWS' ? 'selected' : ''
				} value="tyWoS">Validate and Show Checkout without SAVING</option>
        `;

		settingWW.appendChild(lbl);
		settingWW.appendChild(inpt);
		settingWW.appendChild(dropDown);
		settingWW.appendChild(btn);
		settingW.appendChild(settingWW);
		this.colWrapper.appendChild(settingW);
		// console.log("Building the columns");

		for (let index = 0; index < this.editors.numberOfColumns; index++) {
			//  console.log("Start column, ", index);
			if (e == 'v2' && index == 1) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('oneUnderOne');
			}
			let col = document.createElement('div');
			col.classList.add('ce-editorjsColumns_col');
			col.classList.add('ce-editorjsColumnsForm_col');
			col.classList.add('editorjs_col_' + index);

			let editor_col_id = uuidv4();
			// console.log("generating: ", editor_col_id);
			col.id = editor_col_id;

			if (e == 'v2' && index == 1) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('oneUnderOne');
				wrapperCol2.appendChild(col);
				this.colWrapper.appendChild(wrapperCol2);
				// if (this.data.cols[index].blocks == this.defaultCol1.blocks ){
				// this.data.cols[index].blocks[2].destroy();
				this.data.cols[index].blocks.splice(-1);
				// console.log(this.data.cols[index]);
				this.data.cols[index].blocks[1] = {
					id: uuidv4(),
					type: 'subCols',
					data: {
						cols: [
							{
								time: 1671655741721,
								blocks: [
									{
										id: uuidv4(),
										type: 'oldAddress',
										data: {
											check_row1_title: 'Old Address',
											check_row1_text: '',
											check_row1_className: 'text-sm font-medium pr-5 py-3',
											check_row1_info: false,
											address_visible: true,
											address_label: 'Old Address',
											address_className: 'justify-end pr-5 mt-5',
											address_inputClassName: 'w-full',
											address_labelClassName: 'text-right pr-1 justify-end',
											address_inputWrapperClassName: 'relative justify-end xl:w-2/3 lg:w-2/4 w-2/4 relative',
											address_isRequired: true,

											line2_visible: true,
											line2_label: 'Address Line 2',
											line2_className: 'justify-end pr-5',
											line2_inputClassName: 'xl:w-2/3 lg:w-2/4 w-2/4',
											line2_labelClassName: 'text-right pr-1 justify-end',
											line2_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
											line2_isRequired: false,

											city_visible: true,
											city_label: 'Old City',
											city_className: 'justify-end pr-5',
											city_inputClassName: 'w-full',
											city_labelClassName: 'text-right pr-1 justify-end',
											city_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
											city_isRequired: true,
											state_visible: true,
											state_label: 'Old State',
											state_className: 'justify-end pr-5',
											state_inputClassName: 'w-full',
											state_labelClassName: 'text-right pr-1 justify-end',
											state_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
											state_isRequired: true,
											zip_visible: true,
											zip_label: 'Old Zip Code',
											zip_className: 'justify-end pr-5',
											zip_inputClassName: 'w-full',
											zip_labelClassName: 'text-right pr-1 justify-end',
											zip_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
											zip_isRequired: true,
											autocomplete: true,
											showDropDown: true,
										},
									},
								],
							},
							{
								time: 1671655741722,
								blocks: [
									{
										id: uuidv4(),
										type: 'newAddress',
										data: {
											check_row1_title: 'New Address',
											check_row1_text: '',
											check_row1_className: 'text-sm font-medium pr-5 py-3',
											check_row1_info: false,
											address_visible: true,
											address_label: 'New Address',
											address_className: 'justify-end pr-5 mt-5',
											address_inputClassName: 'w-full',
											address_labelClassName: 'text-right pr-1 justify-end',
											address_inputWrapperClassName: 'relative justify-end xl:w-2/3 lg:w-2/4 w-2/4 relative',
											address_isRequired: true,

											line2_visible: true,
											line2_label: 'Address Line 2',
											line2_className: 'justify-end pr-5',
											line2_inputClassName: 'xl:w-2/3 lg:w-2/4 w-2/4',
											line2_labelClassName: 'text-right pr-1 justify-end',
											line2_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
											line2_isRequired: false,

											city_visible: true,
											city_label: 'New City',
											city_className: 'justify-end pr-5',
											city_inputClassName: 'w-full',
											city_labelClassName: 'text-right pr-1 justify-end',
											city_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
											city_isRequired: true,
											state_visible: true,
											state_label: 'New State',
											state_className: 'justify-end pr-5',
											state_inputClassName: 'w-full',
											state_labelClassName: 'text-right pr-1 justify-end',
											state_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
											state_isRequired: true,
											zip_visible: true,
											zip_label: 'New Zip Code',
											zip_className: 'justify-end pr-5',
											zip_inputClassName: 'w-full',
											zip_labelClassName: 'text-right pr-1 justify-end',
											zip_inputWrapperClassName: 'justify-end xl:w-2/3 lg:w-2/4 w-2/4',
											zip_isRequired: true,
											autocomplete: true,
											showDropDown: true,
										},
									},
								],
							},
						],
					},
				};

				// }
			} else if (e == 'v2' && index == 2) {
				this.colWrapper.querySelector('.oneUnderOne').appendChild(col);

				// this.colWrapper.appendChild(col);
			} else {
				if (e == 'v1') {
					let vefirySubCols = this.data.cols[1].blocks.findIndex((e) => {
						return e.type == 'subCols';
					});
					if (vefirySubCols >= 0) {
						this.data.cols[1].blocks.push(this.data.cols[1].blocks[vefirySubCols].data.cols[0].blocks[0]);
						this.data.cols[1].blocks.push(this.data.cols[1].blocks[vefirySubCols].data.cols[1].blocks[0]);
						this.data.cols[1].blocks = this.data.cols[1].blocks.filter((e) => {
							return e.type !== 'subCols';
						});
					}
				}
				// console.log('COL -------->', this.data.cols[1]);
				this.colWrapper.appendChild(col);
			}

			let editorjs_instance = new EditorJS({
				defaultBlock: 'paragraph',
				holder: editor_col_id,
				tools: this.config.tools,
				data: this.data.cols[index],
				readOnly: this.readOnly,
				minHeight: 50,
			});

			this.editors.cols.push(editorjs_instance);
		}
	}

	render() {
		// This is needed to prevent the enter / tab keys - it globally removes them!!!

		// it runs MULTIPLE times. - this is not good, but works for now
		//  window.helpme = document.addEventListener('keydown', function(event) {

		//      // if (event.key === "Enter" && event.altKey) {
		//      // 	console.log("ENTER ALT Captured")
		//      // 	console.log(event.target)

		//      // 	// let b = event.target.dispatchEvent(new KeyboardEvent('keyup',{'key':'a'}));

		//      // 	event.target.innerText += "Aß"

		//      // 	// console.log(b)
		//      // }
		//      // else
		//      if (event.key === "Enter") {
		//          event.stopImmediatePropagation();
		//          event.preventDefault();
		//         //  console.log("ENTER Captured")
		//      }
		//      if (event.key === "Tab") {
		//          event.stopImmediatePropagation();
		//          event.preventDefault();
		//         //  console.log("TAB Captured")
		//      }
		//  }, true);

		// console.log("Generating Wrapper");

		// console.log(this.api.blocks.getCurrentBlockIndex());

		this.colWrapper = document.createElement('div');
		this.colWrapper.classList.add('ce-editorjsColumns_wrapper');

		let settingW = document.createElement('div');
		let settingWW = document.createElement('div');
		settingW.classList.add('settingsWrapper');

		let lbl = document.createElement('label');
		lbl.innerHTML = 'Container class';
		lbl.setAttribute('for', 'ContainerClass');

		let inpt = document.createElement('input');
		inpt.setAttribute('name', 'ContainerClass');
		inpt.setAttribute('type', 'text');
		inpt.setAttribute(
			'value',
			this.data && this.data.container
				? this.data.container
				: 'container mx-auto flex flex-wrap flex-row justify-between items-top gap-x-5 md:px-5 px-0'
		);

		let btn = document.createElement('button');
		btn.innerHTML = 'Save';
		btn.addEventListener('click', () => {
			this._updateCols('settings');
			// this.toggleClass('settings');
		});

		let dropDown = document.createElement('select');
		dropDown.setAttribute('name', 'ActionType');
		dropDown.innerHTML = `
        <option ${this.data.action == 'checkout' ? 'selected' : ''} value="checkout">Save to CRM -> Checkout</option>
        <option ${this.data.action == 'ty' ? 'selected' : ''} value="ty">Save to CRM -> Thank You Page</option>
        <option ${this.data.action == 'tyWoS' ? 'selected' : ''} value="tyWoS">Thank You Page without SAVING</option>
        `;

		settingWW.appendChild(lbl);
		settingWW.appendChild(inpt);
		settingWW.appendChild(dropDown);
		settingWW.appendChild(btn);
		settingW.appendChild(settingWW);
		this.colWrapper.appendChild(settingW);

		for (let index = 0; index < this.editors.cols.length; index++) {
			this.editors.cols[index].destroy();
		}

		// console.log(this.editors.cols);
		this.editors.cols = []; //empty the array of editors
		// console.log(this.editors.cols);

		// console.log("Building the columns");

		//  console.log('CONFIG ==>', this.config);
		for (let index = 0; index < this.editors.numberOfColumns; index++) {
			// console.log("Start column, ", index);
			if (this.data.type == 'v2' && index == 1) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('oneUnderOne');
			}
			let col = document.createElement('div');
			col.classList.add('ce-editorjsColumns_col');
			col.classList.add('ce-editorjsColumnsForm_col');
			col.classList.add('editorjs_col_' + index);

			let editor_col_id = uuidv4();
			//  console.log("generating: ", editor_col_id);
			col.id = editor_col_id;

			if (this.data.type == 'v2' && index == 1) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('oneUnderOne');
				wrapperCol2.appendChild(col);
				this.colWrapper.appendChild(wrapperCol2);
			} else if (this.data.type == 'v2' && index == 2) {
				this.colWrapper.querySelector('.oneUnderOne').appendChild(col);

				// this.colWrapper.appendChild(col);
			} else {
				this.colWrapper.appendChild(col);
			}

			this.data.cols[index] = this.data.cols[index]
				? this.data.cols[index]
				: index == 0
				? this.defaultCol0
				: index == 1
				? this.defaultCol1
				: index == 2
				? this.defaultCol2
				: this.data.cols[index];

			let editorjs_instance = new EditorJS({
				defaultBlock: 'paragraph',
				holder: editor_col_id,
				tools: this.config.tools,
				//  tunes: this.config.tunes,
				data: this.data.cols[index],

				readOnly: this.readOnly,
				minHeight: 50,
			});

			this.editors.cols.push(editorjs_instance);
			// console.log("End column, ", index);
		}
		return this.colWrapper;
	}

	async save() {
		if (!this.readOnly) {
			// console.log("Saving");
			for (let index = 0; index < this.editors.cols.length; index++) {
				//    if (this.editors.cols[index].isReady.length ){
				// let colData = await this.editors.cols[index].save() !== undefined ? await this.editors.cols[index].save() : {};
				let colData =
					(await this.editors.cols[index].save()) !== undefined ? await this.editors.cols[index].save() : {};
				this.data.cols[index] = colData;
				// console.log('COL DATA:', colData, this);
				//    }

				let id = this.editors.cols[index].configuration.holder;
				// console.log('ID:-------->', id);
				if (id) {
					let title = document.getElementById(id).querySelector('.HeadLineForm');
					if (title) {
						let d = {
							title: title.querySelector('.HeadLineTitle_inputWrapper').textContent,
							textClass: title.parentElement.parentElement.classList.value,
							bgClass: title.parentElement.parentElement.parentElement.classList.value,
							alignClass: `text-${
								title.parentElement.parentElement.parentElement.parentElement.classList.value.split('--')[1]
							}`,
							wrapperClass: title.querySelector('[name="wrapperClass"]').value,
							titleClass: title.querySelector('[name="titleClass"]').value,
						};
						//    console.log(d);
						this.data.titles[index] = d;
					}
				}
			}

			this.data.container = this.colWrapper.querySelector('[name="ContainerClass"]').value;
			this.data.action = this.colWrapper.querySelector('[name="ActionType"]').value;
		}

		return this.data;
	}

	static get toolbox() {
		return {
			icon: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path></svg>`,
			title: 'Form Container',
		};
	}
}

export { FormCols as default };
