
export default class AgreementCheckBoxHome {
	constructor(params) {

        this.data = params.data;
    }

    static get toolbox() {
      return {
        title: 'Agreement Checkbox Home',
        icon: '<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>'
      };
    }

    render(){
        const wrapper = this.make('div', 'Agreement', '',
        `
        <div class="settingsWrapper settingsWrapperCustom">
            <div>
                <label for="ContainerClassC">Wrapper class</label>
                <input name="ContainerClassC" type="text" value="${this.data.wrapperClass ? this.data.wrapperClass : ''}">
                
            </div> <div>
                <label for="checkboxClass">Checkbox class</label>
                <input name="checkboxClass" type="text" value="${this.data.checkboxClass ? this.data.checkboxClass : ''}">
                
            </div>
            <div>
                <label for="labelClass">Label class</label>
                <input name="labelClass" type="text" value="${this.data.labelClass ? this.data.labelClass : ''}">
                <button id="save">Save</button>
            </div>
        </div>
        
        <div class="cnt"> 
            <input name="agreement" type="checkbox" value="a">
            <label id="agreement" contenteditable="true">${this.data.text ? this.data.text : 'I agree to the <a href="/pages/terms-of-service" target="_blank" class="underline">Terms of Service</a>, <a href="/pages/terms-of-use" target="_blank" class="underline">Terms of Use</a> and <a href="/pages/privacy-policy" target="_blank" class="underline">Privacy Policy</a> of this website.'}<label>     
        </div>`);

        this.wrapper = wrapper;
        this.wrapper.querySelector("#save").addEventListener('click', () => {
			this._updateCols('settings');
		});
        return this.wrapper;
    }

    save(){
        this.data = {
            text: this.wrapper.querySelector("#agreement").innerHTML.trim(),
            defaultChecked: this.wrapper.querySelector('[name="agreement"]').checked,
            // showPopUp: this.wrapper.querySelector('[name="showTermsPU"]').checked, // show terms pop up
            wrapperClass: this.wrapper.querySelector('[name="ContainerClassC"]').value, // show terms pop up
            checkboxClass: this.wrapper.querySelector('[name="checkboxClass"]').value, // show terms pop up
            labelClass: this.wrapper.querySelector('[name="labelClass"]').value, // show terms pop up
            // wrapper class
            // checkbox class
            // label class
        }
        return this.data;
    }

    make(tagName, classNames = null, attributes = {}, content = '') {
		const el = document.createElement(tagName);

		if (Array.isArray(classNames)) {
			el.classList.add(...classNames);
		} else if (classNames) {
			el.classList.add(classNames);
		}

		for (const attrName in attributes) {
			el[attrName] = attributes[attrName];
		}
		if (content !== '') {
			el.innerHTML = content;
		}

		return el;
	}

    renderSettings() {
        const buttonSettings = {
            name: "Custom Settings",
            icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="20" height="20" rx="5" fill="white"/>
            <path d="M10 6.25V5M10 6.25C9.66848 6.25 9.35054 6.3817 9.11612 6.61612C8.8817 6.85054 8.75 7.16848 8.75 7.5C8.75 7.83152 8.8817 8.14946 9.11612 8.38388C9.35054 8.6183 9.66848 8.75 10 8.75M10 6.25C10.3315 6.25 10.6495 6.3817 10.8839 6.61612C11.1183 6.85054 11.25 7.16848 11.25 7.5C11.25 7.83152 11.1183 8.14946 10.8839 8.38388C10.6495 8.6183 10.3315 8.75 10 8.75M6.25 13.75C6.58152 13.75 6.89946 13.6183 7.13388 13.3839C7.3683 13.1495 7.5 12.8315 7.5 12.5C7.5 12.1685 7.3683 11.8505 7.13388 11.6161C6.89946 11.3817 6.58152 11.25 6.25 11.25M6.25 13.75C5.91848 13.75 5.60054 13.6183 5.36612 13.3839C5.1317 13.1495 5 12.8315 5 12.5C5 12.1685 5.1317 11.8505 5.36612 11.6161C5.60054 11.3817 5.91848 11.25 6.25 11.25M6.25 13.75V15M6.25 11.25V5M10 8.75V15M13.75 13.75C14.0815 13.75 14.3995 13.6183 14.6339 13.3839C14.8683 13.1495 15 12.8315 15 12.5C15 12.1685 14.8683 11.8505 14.6339 11.6161C14.3995 11.3817 14.0815 11.25 13.75 11.25M13.75 13.75C13.4185 13.75 13.1005 13.6183 12.8661 13.3839C12.6317 13.1495 12.5 12.8315 12.5 12.5C12.5 12.1685 12.6317 11.8505 12.8661 11.6161C13.1005 11.3817 13.4185 11.25 13.75 11.25M13.75 13.75V15M13.75 11.25V5" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            </div>`,
        };
        const wrapper = document.createElement("div");

        let buttonSettings_Button = document.createElement("div");
        buttonSettings_Button.classList.add("cdx-settings-button");
        buttonSettings_Button.innerHTML = buttonSettings.icon;

        buttonSettings_Button.addEventListener("click", (event) => {
            this._updateCols('settings');
        });
        wrapper.appendChild(buttonSettings_Button);
        return wrapper;
    }

    async _updateCols(num) {
        // Should probably update to make number dynamic... but this will do for now
        
        if (num == 'settings') {
            this.save()
            this.wrapper.querySelector('.settingsWrapperCustom').classList.toggle('active');
           //  console.log('toggle setting wrapper')
            return;
         }
    }


}