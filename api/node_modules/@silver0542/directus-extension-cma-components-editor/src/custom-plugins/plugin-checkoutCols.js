/**
 * Column Block for the Editor.js.
 *
 * @author Calum Knott (calum@calumk.com)
 * @copyright Calum Knott
 * @license The MIT License (MIT)
 */

/**
 * @typedef {Object} EditorJsColumnsData
 * @description Tool's input and output data format
 */

import { v4 as uuidv4 } from 'uuid';

import EditorJS from '@editorjs/editorjs'; // required for npm mode

class CheckoutCols {
	constructor({ data, config, api, readOnly }) {
		// start by setting up the required parts
		this.api = api;
		this.readOnly = readOnly;
		this.config = config || {};

		this._CSS = {
			block: this.api.styles.block,
			wrapper: 'ce-EditorJsColumns',
		};

		if (!this.readOnly) {
			this.onKeyUp = this.onKeyUp.bind(this);
		}

		this._data = {};

		this.editors = {};

		this.colWrapper = undefined;

		this.editors.cols = [];

		this.data = data;

		if (!Array.isArray(this.data.cols)) {
			this.data.cols = [];
			this.data.titles = [];
			this.data.container = this.data.container ? this.data.container : null;

			this.data.type = this.data.type ? this.data.type : 'v1';
			this.editors.numberOfColumns = 3;
		} else {
			this.editors.numberOfColumns = this.data.cols.length;
		}

		this.data.action = this.data.action ? this.data.action : 'checkout';
		//  console.log('Action', this.data.action);

		this.defaultCol2 = {
			blocks: [
				{
					id: uuidv4(),
					type: 'formColTitle',
					data: {
						wrapperClass: 'flex-1 grow basis-0 min-w-0 border-4 border-primary-100',
						titleClass: 'w-full p-4',
						title: 'Billing Information',
					},
					tunes: {
						texColorTune: {
							textColor: 'white',
						},
						backgroundTune: {
							containerBg: 'primary-50',
						},
						alignmentTune: {
							alignment: 'left',
						},
					},
				},
				{
					id: uuidv4(),
					type: 'bilingAddress',
					data: {
						default_address: 'old',
						choose_label: 'Choose Billing Address 123',
						address_label: 'Billing Address',
						address_visible: true,
						addressShow_Label: false,
						address_autocomplete: true,
						address_className: 'justify-end px-5 mt-5 mb-4',
						address_inputClassName: 'w-full p-2',
						address_labelClassName: 'text-right pr-1 justify-end',
						address_inputWrapperClassName: 'relative justify-end w-full',

						city_label: 'Billing City',
						city_visible: true,
						cityShow_Label: false,
						city_className: 'justify-end px-5 mb-4',
						city_inputClassName: 'w-full p-2',
						city_labelClassName: 'text-right pr-1 justify-end',
						city_inputWrapperClassName: 'justify-end w-full',

						state_label: 'Billing State',
						state_visible: true,
						stateShow_Label: false,
						state_className: 'justify-end pl-5 w-2/3 mb-4',
						state_inputClassName: 'w-full p-2',
						state_labelClassName: 'text-right pr-1 justify-end',
						state_inputWrapperClassName: 'justify-end w-full',

						zip_label: 'Billing Zip',
						zip_visible: false,
						zipShow_Label: false,
						zip_className: '',
						zip_inputClassName: '',
						zip_labelClassName: '',
						zip_inputWrapperClassName: '',
					},
				},
			],
			version: '2.26.0',
		};
		this.defaultCol1 = {
			blocks: [
				{
					id: uuidv4(),
					type: 'formColTitle',
					data: {
						wrapperClass: 'flex-1 grow basis-0 min-w-0 border-4 border-primary-100',
						titleClass: 'w-full p-4',
						title: 'Address Change Details',
					},
					tunes: {
						texColorTune: {
							textColor: 'white',
						},
						backgroundTune: {
							containerBg: 'primary-50',
						},
						alignmentTune: {
							alignment: 'left',
						},
					},
				},
				{
					id: uuidv4(),
					type: 'orderDetails',
					data: {},
				},
			],
			version: '2.26.0',
		};
		this.defaultCol0 = {
			blocks: [
				{
					id: uuidv4(),
					type: 'formColTitle',
					data: {
						wrapperClass: 'flex-1 grow basis-0 min-w-full mb-2 border-4 border-primary-100',
						titleClass: 'w-full p-4',
						title: 'Next Step - Please Verify Your Change of Address Information and Submit Payment',
					},
					tunes: {
						texColorTune: {
							textColor: 'white',
						},
						backgroundTune: {
							containerBg: 'primary-50',
						},
						alignmentTune: {
							alignment: 'center',
						},
					},
				},
			],
			version: '2.26.0',
		};
	}

	convertProxyArray(proxyArray) {
		// If the argument is not an object or array, return it as is
		if (typeof proxyArray !== 'object' || proxyArray === null) {
			return proxyArray;
		}

		// If the argument is a proxy, get the underlying array and continue recursively
		if (Array.isArray(proxyArray)) {
			return proxyArray.map((item) => this.convertProxyArray(item));
		}

		// If the argument is an object, convert all its properties recursively
		const obj = {};
		for (const [key, value] of Object.entries(proxyArray)) {
			obj[key] = this.convertProxyArray(value);
		}
		return obj;
	}

	static get isReadOnlySupported() {
		return true;
	}

	onKeyUp(e) {
		//  console.log(e)
		//  console.log("heyup")
		if (e.code !== 'Backspace' && e.code !== 'Delete') {
			return;
		}
	}

	get CSS() {
		return {
			settingsButton: this.api.styles.settingsButton,
			settingsButtonActive: this.api.styles.settingsButtonActive,
		};
	}

	renderSettings() {
		//  const buttonTwoCols = {
		//      name: "Two Cols",
		//      icon: `<div>2</div>`,
		//  };

		const buttonSettings = {
			name: 'Custom Settings',
			icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="20" height="20" rx="5" fill="white"/>
            <path d="M10 6.25V5M10 6.25C9.66848 6.25 9.35054 6.3817 9.11612 6.61612C8.8817 6.85054 8.75 7.16848 8.75 7.5C8.75 7.83152 8.8817 8.14946 9.11612 8.38388C9.35054 8.6183 9.66848 8.75 10 8.75M10 6.25C10.3315 6.25 10.6495 6.3817 10.8839 6.61612C11.1183 6.85054 11.25 7.16848 11.25 7.5C11.25 7.83152 11.1183 8.14946 10.8839 8.38388C10.6495 8.6183 10.3315 8.75 10 8.75M6.25 13.75C6.58152 13.75 6.89946 13.6183 7.13388 13.3839C7.3683 13.1495 7.5 12.8315 7.5 12.5C7.5 12.1685 7.3683 11.8505 7.13388 11.6161C6.89946 11.3817 6.58152 11.25 6.25 11.25M6.25 13.75C5.91848 13.75 5.60054 13.6183 5.36612 13.3839C5.1317 13.1495 5 12.8315 5 12.5C5 12.1685 5.1317 11.8505 5.36612 11.6161C5.60054 11.3817 5.91848 11.25 6.25 11.25M6.25 13.75V15M6.25 11.25V5M10 8.75V15M13.75 13.75C14.0815 13.75 14.3995 13.6183 14.6339 13.3839C14.8683 13.1495 15 12.8315 15 12.5C15 12.1685 14.8683 11.8505 14.6339 11.6161C14.3995 11.3817 14.0815 11.25 13.75 11.25M13.75 13.75C13.4185 13.75 13.1005 13.6183 12.8661 13.3839C12.6317 13.1495 12.5 12.8315 12.5 12.5C12.5 12.1685 12.6317 11.8505 12.8661 11.6161C13.1005 11.3817 13.4185 11.25 13.75 11.25M13.75 13.75V15M13.75 11.25V5" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            </div>`,
		};
		const buttonSettings1 = {
			name: 'Default',
			icon: `<div>
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
               <rect width="20" height="20" rx="5" fill="white"/>
               <rect x="3" y="8" width="6.22222" height="10" rx="1" fill="#33375D"/>
               <rect x="10.7778" y="8" width="6.22222" height="10" rx="1" fill="#33375D"/>
               <rect x="3" y="7" width="4" height="14" rx="1" transform="rotate(-90 3 7)" fill="#33375D"/>
           </svg>
           </div>`,
		};
		const buttonSettings2 = {
			name: 'With Additional Section',
			icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="20" height="20" rx="5" fill="white"/>
            <rect x="3" y="8" width="6" height="9" rx="1" fill="#33375D"/>
            <rect x="10" y="8" width="7" height="3" rx="1" fill="#33375D"/>
            <rect x="3" y="7" width="4" height="14" rx="1" transform="rotate(-90 3 7)" fill="#33375D"/>
            <rect x="10" y="12" width="7" height="5" rx="1" fill="#33375D"/>
            </svg>
            
            </div>`,
		};
		const buttonThreeCols = {
			name: 'Default Layout',
			icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="20" height="20" rx="5" fill="white"/>
            <rect x="3" y="5" width="4" height="10" rx="1" fill="#33375D"/>
            <rect x="8" y="5" width="4" height="10" rx="1" fill="#33375D"/>
            <rect x="13" y="5" width="4" height="10" rx="1" fill="#33375D"/>
            </svg>
            </div>`,
		};

		const buttonFourCols = {
			name: 'Custom 1',
			icon: `<div><svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="20" height="20" rx="5" fill="white"/>
            <rect x="3" y="5" width="4" height="9" rx="1" fill="#33375D"/>
            <rect x="8" y="5" width="9" height="4" rx="1" fill="#33375D"/>
            <rect x="8" y="10" width="9" height="4" rx="1" fill="#33375D"/>
            </svg>
            </div>`,
		};

		//  const buttonRollCols = {
		//      name: "Roll Cols",
		//      icon: `<div>R</div>`,
		//  };

		const wrapper = document.createElement('div');

		//  let buttonTwoCols_Button = document.createElement("div");
		//  buttonTwoCols_Button.classList.add("cdx-settings-button");
		//  buttonTwoCols_Button.innerHTML = buttonTwoCols.icon;

		let buttonSettings_Button = document.createElement('div');
		buttonSettings_Button.classList.add('cdx-settings-button');
		buttonSettings_Button.innerHTML = buttonSettings.icon;

		let buttonSettings_Button2 = document.createElement('div');
		buttonSettings_Button2.classList.add('cdx-settings-button');
		buttonSettings_Button2.innerHTML = buttonSettings1.icon;

		let buttonSettings_Button3 = document.createElement('div');
		buttonSettings_Button3.classList.add('cdx-settings-button');
		buttonSettings_Button3.innerHTML = buttonSettings2.icon;

		buttonSettings_Button.addEventListener('click', (event) => {
			this._updateCols('settings');
		});

		buttonSettings_Button2.addEventListener('click', (event) => {
			this._updateCols(3);
		});
		buttonSettings_Button3.addEventListener('click', (event) => {
			this._updateCols(4);
		});

		//  wrapper.appendChild(buttonTwoCols_Button);
		wrapper.appendChild(buttonSettings_Button);
		wrapper.appendChild(buttonSettings_Button2);
		wrapper.appendChild(buttonSettings_Button3);
		//  wrapper.appendChild(buttonThreeCols_Button);
		//  wrapper.appendChild(buttonFourCols_Button);
		//  wrapper.appendChild(buttonRollCols_Button);

		return wrapper;
	}

	_rollCols() {
		// this shifts or "rolls" the columns
		this.data.cols.unshift(this.data.cols.pop());
		this.editors.cols.unshift(this.editors.cols.pop());
		this._rerender();
	}

	async _updateCols(num) {
		// Should probably update to make number dynamic... but this will do for now

		if (num == 'settings') {
			this.colWrapper.querySelector('.settingsWrapper').classList.toggle('active');
			//  console.log('toggle setting wrapper')
			return;
		}
		if (num == 3) {
			if (this.editors.numberOfColumns !== 3) {
				//  let resp = await Swal.fire({
				//      title: "Are you sure?",
				//      text: "This will delete Column 3!",
				//      icon: "warning",
				//      showCancelButton: true,
				//      confirmButtonColor: "#3085d6",
				//      cancelButtonColor: "#d33",
				//      confirmButtonText: "Yes, delete it!",
				//  });

				//  if (resp.isConfirmed) {
				this.data.type = 'v1';
				this.editors.numberOfColumns = 3;
				//  this.data.cols.pop();
				//  this.editors.cols.pop();
				this._rerender('v1');
				//  }
			}
		}
		if (num == 4) {
			this.editors.numberOfColumns = 4;
			this.data.type = 'v2';
			this._rerender('v2');
			// console.log(3);
		}
	}

	async _rerender(e = 'v1') {
		await this.save();
		// console.log('ColWRAPPER ->>>>>>> ',this.data);
		if ((this.editors.cols.length == 4 && e == 'v2') || (this.editors.cols.length == 3 && e == 'v1')) {
			return;
		}
		for (let index = 0; index < this.editors.cols.length; index++) {
			this.editors.cols[index].destroy();
		}
		this.editors.cols = [];

		this.colWrapper.innerHTML = '';

		let settingW = document.createElement('div');
		let settingWW = document.createElement('div');
		settingW.classList.add('settingsWrapper');

		let lbl = document.createElement('label');
		lbl.innerHTML = 'Container class';
		lbl.setAttribute('for', 'ContainerClass');

		let inpt = document.createElement('input');
		inpt.setAttribute('name', 'ContainerClass');
		inpt.setAttribute('type', 'text');
		inpt.setAttribute(
			'value',
			this.data && this.data.container
				? this.data.container
				: 'container mx-auto flex flex-wrap flex-row justify-between items-top gap-x-5 md:px-5 px-0'
		);

		let btn = document.createElement('button');
		btn.innerHTML = 'Save';
		btn.addEventListener('click', () => {
			// this._updateCols('settings');
			this.toggleClass('settings');
		});

		let dropDown = document.createElement('select');
		dropDown.setAttribute('name', 'ActionType');
		dropDown.innerHTML = `
       <option ${this.data.action == 'checkout' ? 'selected' : ''} value="checkout">Save to CRM -> Checkout</option>
       <option ${this.data.action == 'ty' ? 'selected' : ''} value="ty">Save to CRM -> Thank You Page</option>
       <option ${this.data.action == 'tyWoS' ? 'selected' : ''} value="tyWoS">Thank You Page without SAVING</option>
       `;

		settingWW.appendChild(lbl);
		settingWW.appendChild(inpt);
		settingWW.appendChild(dropDown);
		settingWW.appendChild(btn);
		settingW.appendChild(settingWW);
		this.colWrapper.appendChild(settingW);
		// console.log("Building the columns");
		console.log('Col3->', this.data);

		let col3Data_;
		let col3Data;
		if (e == 'v2') {
			// this.data.cols.push(this.data.cols[2]);
			col3Data = this.convertProxyArray(this.data.cols[2].blocks);
			// for(let i =0; i < col3Data.length; i++){

			//     if (col3Data[i].tunes !== undefined){
			//         let ccT = Object.assign({}, col3Data[i].tunes);
			//         col3Data[i].tunes = ccT;

			//     }
			//     let cc = Object.assign({}, col3Data[i].data);
			//     col3Data[i].data = cc;

			//     col3Data_ = Object.assign({}, col3Data[i]);
			//     col3Data[i] = col3Data_;
			// }
		} else {
			col3Data = this.convertProxyArray(this.data.cols[3].blocks);
			// this.data.cols[2] = this.data.cols[3];
		}
		console.log('Col3->', col3Data);
		for (let index = 0; index < this.editors.numberOfColumns; index++) {
			let editor_col_id = uuidv4();
			console.log(editor_col_id);
			//  console.log("Start column, ", index);
			if (e == 'v2' && index == 1) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('oneUnderOne');
			}
			let col = document.createElement('div');
			col.classList.add('ce-editorjsColumns_col');
			col.classList.add('ce-editorjsColumnsForm_col');
			col.classList.add('editorjs_col_' + index);
			col.classList.add('editorjs_col_checkout' + index);

			// console.log("generating: ", editor_col_id);
			col.id = editor_col_id;

			if (e == 'v2' && index == 1) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('flexColCheckout');

				wrapperCol2.appendChild(col);
				this.colWrapper.appendChild(wrapperCol2);

				// if (this.data.cols[index].blocks == this.defaultCol1.blocks ){
				// this.data.cols[index].blocks[2].destroy();
				// this.data.cols[index].blocks.splice(-1);
				// console.log(this.data.cols[index]);
				// this.data.cols[index].blocks[1] =  {
				//     "id": uuidv4(),
				//     "type": "subCols",
				//     "data": {
				//         "cols": this.data.cols[index].blocks[0].data.cols,
				//     }
				// }

				// }
			} else if (e == 'v2' && (index == 2 || index == 3)) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('oneUnderOne');
				wrapperCol2.classList.add('flexOne');

				if (index == 2) {
					this.data.cols[index].blocks = [
						{
							id: uuidv4(),
							type: 'formColTitle',
							data: {
								wrapperClass: 'flex-1 grow basis-0 min-w-0 border-4 border-primary-100',
								titleClass: 'w-full p-4',
								title: 'Order Summary',
							},
							tunes: {
								texColorTune: {
									textColor: 'white',
								},
								backgroundTune: {
									containerBg: 'primary-50',
								},
								alignmentTune: {
									alignment: 'left',
								},
							},
						},
						{
							id: uuidv4(),
							type: 'orderSummary',
							data: {
								wrapperClass: '',
								packageClass: '',
								packagePriceClass: '',
								summaryClass: '',
								summaryTitleClass: '',
								summaryPriceClass: '',
								showEdit: false,
							},
						},
					];

					wrapperCol2.appendChild(col);
					this.colWrapper.querySelector('.flexColCheckout').appendChild(wrapperCol2);
				} else {
					this.colWrapper.querySelector('.oneUnderOne').appendChild(col);
					// this.data.cols[index].blocks.splice(-1);
					this.data.cols[index] = { blocks: col3Data };

					// this.data.cols[index].blocks = col3Data;
				}

				// this.colWrapper.appendChild(col);
			} else {
				if (e == 'v1') {
					let vefirySubCols = this.data.cols[1].blocks.findIndex((e) => {
						return e.type == 'subCols';
					});
					if (vefirySubCols >= 0) {
						this.data.cols[1].blocks.push(this.data.cols[1].blocks[vefirySubCols].data.cols[0].blocks[0]);
						this.data.cols[1].blocks.push(this.data.cols[1].blocks[vefirySubCols].data.cols[1].blocks[0]);
						this.data.cols[1].blocks = this.data.cols[1].blocks.filter((e) => {
							return e.type !== 'subCols';
						});
					}

					if (index == 2) {
						this.data.cols[index] = { blocks: col3Data };
					}
				}
				// console.log('COL -------->', this.data.cols[1]);
				this.colWrapper.appendChild(col);
			}

			let editorjs_instance = new EditorJS({
				defaultBlock: 'paragraph',
				holder: editor_col_id,
				tools: this.config.tools,
				data: this.data.cols[index],
				readOnly: this.readOnly,
				minHeight: 50,
			});

			this.editors.cols.push(editorjs_instance);
		}
	}

	render() {
		// This is needed to prevent the enter / tab keys - it globally removes them!!!

		// it runs MULTIPLE times. - this is not good, but works for now
		// window.helpme = document.addEventListener(
		// 	'keydown',
		// 	function (event) {
		// 		// if (event.key === "Enter" && event.altKey) {
		// 		// 	console.log("ENTER ALT Captured")
		// 		// 	console.log(event.target)

		// 		// 	// let b = event.target.dispatchEvent(new KeyboardEvent('keyup',{'key':'a'}));

		// 		// 	event.target.innerText += "Aß"

		// 		// 	// console.log(b)
		// 		// }
		// 		// else
		// 		if (event.key === 'Enter') {
		// 			event.stopImmediatePropagation();
		// 			event.preventDefault();
		// 			//  console.log("ENTER Captured")
		// 		}
		// 		if (event.key === 'Tab') {
		// 			event.stopImmediatePropagation();
		// 			event.preventDefault();
		// 			//  console.log("TAB Captured")
		// 		}
		// 	},
		// 	true
		// );

		// console.log("Generating Wrapper");

		// console.log(this.api.blocks.getCurrentBlockIndex());

		this.colWrapper = document.createElement('div');
		this.colWrapper.classList.add('ce-editorjsColumns_wrapper');
		this.colWrapper.classList.add('ce-editorjsColumns_Checkoutwrapper');

		let settingW = document.createElement('div');
		let settingWW = document.createElement('div');
		settingW.classList.add('settingsWrapper');

		let lbl = document.createElement('label');
		lbl.innerHTML = 'Container class';
		lbl.setAttribute('for', 'ContainerClass');

		let inpt = document.createElement('input');
		inpt.setAttribute('name', 'ContainerClass');
		inpt.setAttribute('type', 'text');
		inpt.setAttribute(
			'value',
			this.data && this.data.container
				? this.data.container
				: 'container mx-auto flex flex-wrap flex-row justify-between items-top gap-x-5 md:px-5 px-0'
		);

		let btn = document.createElement('button');
		btn.innerHTML = 'Save';
		btn.addEventListener('click', () => {
			this._updateCols('settings');
			// this.toggleClass('settings');
		});

		let dropDown = document.createElement('select');
		dropDown.setAttribute('name', 'ActionType');
		dropDown.innerHTML = `
       <option ${
					this.data.action == 'checkout' ? 'selected' : ''
				} value="checkout">Real Checkout -> Thankyou Page </option>
       <option ${
					this.data.action == 'questions' ? 'selected' : ''
				} value="questions">Real Checkout -> Question -> Thankyou Page</option>
       <option ${this.data.action == 'tyWoS' ? 'selected' : ''} value="tyWoS">Thank You Page without Payment</option>
       `;

		settingWW.appendChild(lbl);
		settingWW.appendChild(inpt);
		settingWW.appendChild(dropDown);
		settingWW.appendChild(btn);
		settingW.appendChild(settingWW);
		this.colWrapper.appendChild(settingW);

		for (let index = 0; index < this.editors.cols.length; index++) {
			this.editors.cols[index].destroy();
		}

		// console.log(this.editors.cols);
		this.editors.cols = []; //empty the array of editors
		// console.log(this.editors.cols);

		// console.log("Building the columns");

		//  console.log('CONFIG ==>', this.config);
		console.log('TYPE===>', this.data);
		for (let index = 0; index < this.editors.numberOfColumns; index++) {
			// console.log("Start column, ", index);

			let col = document.createElement('div');
			col.classList.add('ce-editorjsColumns_col');
			col.classList.add('ce-editorjsColumnsForm_col');
			col.classList.add('editorjs_col_' + index);
			col.classList.add('editorjs_col_checkout' + index);

			let editor_col_id = uuidv4();
			//  console.log("generating: ", editor_col_id);
			col.id = editor_col_id;
			console.log('ID->>', editor_col_id, index);

			if (this.data.type == 'v2' && index == 1) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('flexColCheckout');
				wrapperCol2.appendChild(col);
				this.colWrapper.appendChild(wrapperCol2);
			} else if (this.data.type == 'v2' && (index == 2 || index == 3)) {
				let wrapperCol2 = document.createElement('div');
				wrapperCol2.classList.add('oneUnderOne');
				wrapperCol2.classList.add('flexOne');
				if (index == 2) {
					wrapperCol2.appendChild(col);
					this.colWrapper.querySelector('.flexColCheckout').appendChild(wrapperCol2);
				} else {
					this.colWrapper.querySelector('.oneUnderOne').appendChild(col);
				}
			} else {
				this.colWrapper.appendChild(col);
			}

			//  this.data.cols[index] = this.data.cols[index];
			//          ? this.data.cols[index]
			//          : index == 0
			//             ? this.defaultCol0
			//             : index == 1
			//                 ? this.defaultCol1
			//                 : index == 2
			//                     ? this.defaultCol2
			//                     : this.data.cols[index];

			let editorjs_instance = new EditorJS({
				defaultBlock: 'paragraph',
				holder: editor_col_id,
				tools: this.config.tools,
				//  tunes: this.config.tunes,
				data: this.data.cols[index],

				readOnly: this.readOnly,
				minHeight: 50,
			});

			this.editors.cols.push(editorjs_instance);
			// console.log("End column, ", index);
		}
		return this.colWrapper;
	}

	async save() {
		if (!this.readOnly) {
			// console.log("Saving");
			for (let index = 0; index < this.editors.cols.length; index++) {
				//    if (this.editors.cols[index].isReady.length ){
				// let colData = await this.editors.cols[index].save() !== undefined ? await this.editors.cols[index].save() : {};
				let colData =
					(await this.editors.cols[index].save()) !== undefined ? await this.editors.cols[index].save() : {};
				this.data.cols[index] = colData;
				// console.log('COL DATA:', colData, this);
				//    }

				let id = this.editors.cols[index].configuration.holder;
				// console.log('ID:-------->', id);
				if (id) {
					let title = document.getElementById(id).querySelector('.HeadLineForm');
					if (title) {
						let d = {
							title: title.querySelector('.HeadLineTitle_inputWrapper').textContent,
							textClass: title.parentElement.parentElement.classList.value,
							bgClass: title.parentElement.parentElement.parentElement.classList.value,
							alignClass: `text-${
								title.parentElement.parentElement.parentElement.parentElement.classList.value.split('--')[1]
							}`,
							wrapperClass: title.querySelector('[name="wrapperClass"]').value,
							titleClass: title.querySelector('[name="titleClass"]').value,
						};
						//    console.log(d);
						this.data.titles[index] = d;
					}
				}
			}

			this.data.container = this.colWrapper.querySelector('[name="ContainerClass"]').value;
			this.data.action = this.colWrapper.querySelector('[name="ActionType"]').value;
		}

		return this.data;
	}

	static get toolbox() {
		return {
			icon: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path></svg>`,
			title: 'Checkout Container',
		};
	}
}

export { CheckoutCols as default };
